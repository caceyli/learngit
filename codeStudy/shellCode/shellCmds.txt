#!/bin/bash
remove all blank at the end of file 'win2k3_01_20160518.txt' and create a new fiel win2k3_01.txt. the former file content not changed.
[oracle@Gary9105 ~]$ sed -e 's/[ ]*$//g' win2k3_01_20160518.txt >win2k3_01.txt

[oracle@Gary9105 ~]$ date '+%Y%m%d'
20160516

NOW=`date '+%Y%m%d'`

sh bdna.sh >/dev/null <<EOF
list
exit
EOF


#!/bin/bash
sh bdna.sh 2>/dev/null <<EOF
list
exit
EOF


#!/bin/bash
sh bdna.sh >/dev/null 2>&1 <<EOF
list
exit
EOF


grep "not successful" | wc -l
grep bdna.version $bdna_version_file | sed 's/.*=//
echo $Plat_Ver | cut -d"." -f1
echo $BDNAComponentHosts | tr ',' '\n'

#cat /etc/passwd|head -n 5
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

/*cut： http://www.cnblogs.com/dong008259/archive/2011/12/09/2282679.html*/
#cat /etc/passwd|head -n 5|cut -d : -f 1
root
bin
daemon
adm
lp

/*awk: http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.htm*/
cat /etc/passwd |awk  -F ':'  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'
name,shell
root,/bin/bash
....
blue,/bin/nosh

# awk -F: '/root/{print $7}' /etc/passwd             
/bin/bash

#cat /etc/passwd |awk  -F ':'  '{print $1}'  
root
daemon
bin
sys


while getopts "f:k:sinhcdl" opt
do
    case $opt in
    f) BCP_FILE=$OPTARG;;
    k) LICENSE_KEY=$OPTARG;;
    s) SKIP_STARTUP_BDNA=true;;
    i) FORCE_INSTALL=true;;
    n) IGNORE_LICENSE=true;;
    c) UPDATE_CONTENT_FILES=true;;
    l) UPDATE_CONTENT_FILES_LOCALLY_ONLY=true;;
    d) UPDATE_DATABASE=true;;
    h) print_usage ; exit 0;;
    *) print_usage ; exit 1;;
    esac
done

sed :
(example text: <Parameter name="dbServer" value="192.168.8.182" override="false"/>)
db_host=`cat $config_xml_file | grep dbServer | sed 's/.*value="//g' | sed 's/".*$//g'`

>/dev/null 2>&1 与 2>&1 >/dev/null 的区别及使用技巧
Command >/dev/null 2>&1 相当于
stdout="/dev/null"
stderr="$stdout"   ## 这时，stderr也等于"/dev/null"了
 
结果是标准输出和标准错误都指向了/dev/null， 也就是所有的输出都被我们丢弃
 
Command 2>&1 >/dev/null 相当于
stderr="$stdout" ##  stderr指向了屏幕，因为stdout这时还是指向屏幕！
stdout="/dev/null" ##   stdout指向了/dev/null，但不会影响到 stderr的指向
 
结果是标准错误仍然被打印到屏幕上， 而标准输出被丢弃
 
相信IQ>0的同学都不难理解上边的解释（A=100; B=A和 B=A, A=100 ，不过如此而已)
99.99%的情况下， 看到Command 2>&1 >/dev/null这种写法，我们就可以预测悲局会发生。
先看一下接下来要使用的示例脚本：
 
------------------------------------------------------------
samli@stc_5_17:~/bin> cat test.sh 
#! /bin/bash
echo hello       ## write to STDOUT
echo world >&2   ## write to STDERR
------------------------------------------------------------
 
使用两种不同顺序的重定向， 来看看结果：
samli@stc_5_17:~/bin> ./test.sh >/dev/null 2>&1
samli@stc_5_17:~/bin> ./test.sh 2>&1 >/dev/null 
world
 
如果我们的脚本在crontab中运行，而且不幸地遇上了sendmail做为MTA， 那么这些输出都将被做为邮件发送（假设你不了解置空MAILTO的意义）。但我们的sendmail客户端程序在母盘中一般是不会正常工作的， 那么/var/spool/clientmqueue/这目录下边的垃圾就很可观了， inode被用光大多是这个原因（见本K吧中其它文章）
不过那 0.01% 却是最有意思的技巧。 下边我们来看个也是很简单的例子。
 
1, 忽略标准错误， 从标准输出取值（地球人都会使用的方法）
samli@stc_5_17:~/bin> a=$( ./test.sh 2> /dev/null )
samli@stc_5_17:~/bin> echo $a
hello
 
2, 那么， 如何只取得 world 呢？ 关健在于如何忽略标准输出，而取得标准错误
好吧， 通篇文章都是为了解释这个答案！
samli@stc_5_17:~/bin> b=$( ./test.sh 2>&1 >/dev/null )     
samli@stc_5_17:~/bin> echo $b
world
 
最后，提个小建议，为了避免>/dev/null 2>&1写法上的困扰，建议使用 &>/dev/null
