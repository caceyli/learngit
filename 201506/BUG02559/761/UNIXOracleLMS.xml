<?xml version="1.0" encoding="UTF-8"?>
<!--
**********************************************************************
*
* Copyright (c) 2007-2008 BDNA Corporation.
* All Rights Reserved. BDNA products and services are protected
* by the following U.S. patent: #6,988,134. BDNA is trademark of
* BDNA Corporation.
*
* ******BDNA CONFIDENTIAL******
** The following code was developed and is owned by BDNA Corporation.
* This code is confidential and may contain trade secrets.  The code
* must not be distributed to any party outside of BDNA Corporation
* without written permission from BDNA Corporation.  The code may be
* covered by patents, patents pending, or patents applied for in the
* US or elsewhere.
*
**********************************************************************
-->
<!DOCTYPE bdna SYSTEM "bdna.dtd">

<!-- ............................................................... -->
<!-- .......   Platform-dependent Oracle fingerprints (UNIX)    .... -->
<!-- ............................................................... -->
<module 
    name="com.bdna.modules.database.UNIXOracleLMS"
    displayLabel="Oracle Database on UNIX LMS collection"
    requiredPlatformVersion="030300"      
    version="1" 
    lastCompatibleVersion="1">

    <moduleDependency
        parentModuleName="com.bdna.modules.database.UNIXOracle" parentModuleVersion="1" />

    <moduleDependency
        parentModuleName="com.bdna.modules.os.Linux" parentModuleVersion="1" />


    <!-- ............................................................... -->
    <!-- .......        AttributeSet Packages                ........... -->
    <!-- ............................................................... -->

    <package name="UNIXOracleLMS" displayLabel="Oracle LMS On UNIX">
        <depend name="IPAddresses" />
        <depend name="hardwareDevices" />
        <depend name="operatingSystems" />
    </package>

    <packageRelationship parentPackage="UNIXOracle" childPackage="UNIXOracleLMS" />

    <!-- ............................................................... -->
    <!-- .......             UNIX Oracle Types               ........... -->
    <!-- ............................................................... -->

    <!--
      In order to add attribute sets at LMS and non-LMS L3, this element is also defined
      in UNIXOracle.xml and UNIXOracleL3. All definitions should be kept in sync
    -->

<!--    <element
        elementName="UNIXOracleInstance"
        elementTypePath="root.types.resource.applicationObject.server.database.OracleInstance"
        displayLabel="Oracle Instance on UNIX"
        isTemplate="true">
        <attributeSet attributeSetName="UNIXOracleInstanceDBOptions"
                      collectorName="UNIXOracleInstanceDBOptionsCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance DB Options">
            <attributeSetEntry attributeName="dbOptions" />
            <attributeSetEntry attributeName="dbaFeatureStats" />
        </attributeSet>
    </element>  -->

    <element
        elementName="UNIXOracleDBInstOption"
        elementTypePath="root.types.resource.applicationObject.OracleDBInstOption"
        displayLabel="UNIX Oracle Instance Option"
        isTemplate="true">
        <attrSysDefValue attributeName="manufacturer">Oracle Corporation</attrSysDefValue>
    </element>

    <element
        elementName="UNIXOracleFootprint"
        elementTypePath="root.types.footprint.OracleLMSFootprint"
        displayLabel="Oracle LMS Footprint on UNIX"
        isTemplate="true" >
        <attributeSet attributeSetName="UNIXOracleInstanceDBOptions"
                      collectorName="UNIXOracleInstanceDBOptionsCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance DB Options">
            <attributeSetEntry attributeName="vOptions" />
            <attributeSetEntry attributeName="dbaFeatures" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions"
                      collectorName="UNIXOracleInstanceLMSOptionsCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection OLAP, Partitioning">
            <attributeSetEntry attributeName="b_partInstalled" />
            <attributeSetEntry attributeName="b_partUsed" />
            <attributeSetEntry attributeName="b_olapInstalled" />
            <attributeSetEntry attributeName="b_olapUsed" />
            <attributeSetEntry attributeName="partInstalled" />
            <attributeSetEntry attributeName="partUsed" />
            <attributeSetEntry attributeName="lmsParQuery" />
            <attributeSetEntry attributeName="parSegOwner" />
            <attributeSetEntry attributeName="olapInstalled" />
            <attributeSetEntry attributeName="olapUsed" />
            <attributeSetEntry attributeName="lmsOlapQuery" />
            <attributeSetEntry attributeName="OLAPCATCNT" />
            <attributeSetEntry attributeName="AWS_CNT" />
            <attributeSetEntry attributeName="AWS" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions2"
                      collectorName="UNIXOracleInstanceLMSOptions2Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection for RAC, DataMining and Spatial">
            <attributeSetEntry attributeName="b_racInstalled" />
            <attributeSetEntry attributeName="b_racUsed" />
            <attributeSetEntry attributeName="b_dmInstalled" />
            <attributeSetEntry attributeName="b_dmUsed" />
            <attributeSetEntry attributeName="b_spatialInstalled" />
            <attributeSetEntry attributeName="b_spatialUsed" />
            <attributeSetEntry attributeName="racInstalled" />
            <attributeSetEntry attributeName="racUsed" />
            <attributeSetEntry attributeName="lmsRACQuery" />
            <attributeSetEntry attributeName="clusterDB" />
            <attributeSetEntry attributeName="clusterInst" />
            <attributeSetEntry attributeName="dmInstalled" />
            <attributeSetEntry attributeName="dmUsed" />
            <attributeSetEntry attributeName="lmsDMQuery" />
            <attributeSetEntry attributeName="CNT_DM_MDL9" />
            <attributeSetEntry attributeName="CNT_DM_OBJ10v1" />
            <attributeSetEntry attributeName="CNT_DM_MDL10v1" />
            <attributeSetEntry attributeName="CNT_DM_MDL10v2" />
            <attributeSetEntry attributeName="CNT_DM_MDL11g" />
            <attributeSetEntry attributeName="spatialInstalled" />
            <attributeSetEntry attributeName="spatialUsed" />
            <attributeSetEntry attributeName="lmsSpatialQuery" />
            <attributeSetEntry attributeName="CNT_SDO_GEOM_METADATA" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions3"
                      collectorName="UNIXOracleInstanceLMSOptions3Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection for label security, database vault, audit vault">
            <attributeSetEntry attributeName="b_lbl_security_installed" />
            <attributeSetEntry attributeName="b_lbl_security_used" />
            <attributeSetEntry attributeName="b_dbVaultInstalled" />
            <attributeSetEntry attributeName="b_dbVaultUsed" />
            <attributeSetEntry attributeName="b_auditVaultInstalled" />
            <attributeSetEntry attributeName="b_auditVaultUsed" />
 
            <attributeSetEntry attributeName="lbl_security_installed" />
            <attributeSetEntry attributeName="lbl_security_used" />
            <attributeSetEntry attributeName="lbl_security_pol_count" />
            <attributeSetEntry attributeName="lbl_security_query" />
            <attributeSetEntry attributeName="dbVaultInstalled" />
            <attributeSetEntry attributeName="dbVaultUsed" />
            <attributeSetEntry attributeName="dvSys" />
            <attributeSetEntry attributeName="dvf" />
            <attributeSetEntry attributeName="dvRealm" />
            <attributeSetEntry attributeName="dbVaultQuery" />
            <attributeSetEntry attributeName="auditVaultInstalled" />
            <attributeSetEntry attributeName="auditVaultUsed" />
            <attributeSetEntry attributeName="auditVaultQuery" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions4"
                      collectorName="UNIXOracleInstanceLMSOptions4Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection for Content database, Record Database, Advanced Security">
            <attributeSetEntry attributeName="b_contentDBInstalled" />
            <attributeSetEntry attributeName="b_contentDBUsed" />
            <attributeSetEntry attributeName="b_recordDBInstalled" />
            <attributeSetEntry attributeName="b_recordDBUsed" />
            <attributeSetEntry attributeName="b_advSecInstalled" />
            <attributeSetEntry attributeName="b_advSecUsed" />
            <attributeSetEntry attributeName="contentDBInstalled" />
            <attributeSetEntry attributeName="contentDBUsed" />
            <attributeSetEntry attributeName="odmDocCustObjCnt" />
            <attributeSetEntry attributeName="contentDBQuery" />
            <attributeSetEntry attributeName="recordDBInstalled" />
            <attributeSetEntry attributeName="recordDBUsed" />
            <attributeSetEntry attributeName="recordODM_Rec_Cnt" />
            <attributeSetEntry attributeName="recordDBQuery" />
            <attributeSetEntry attributeName="advSecInstalled" />
            <attributeSetEntry attributeName="advSecUsed" />
            <attributeSetEntry attributeName="advSecQuery" />
            <attributeSetEntry attributeName="advSecMode" />
            <attributeSetEntry attributeName="columnEncryption" />
            <attributeSetEntry attributeName="tableEncryption" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions5"
                      collectorName="UNIXOracleInstanceLMSOptions5Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection for Oracle Enterprise Managment Pack">
            <attributeSetEntry attributeName="b_oemInstalled" />
            <attributeSetEntry attributeName="b_oemUsed" />
            <attributeSetEntry attributeName="b_tuningPackInstalled" />
            <attributeSetEntry attributeName="b_tuningPackUsed" />
            <attributeSetEntry attributeName="b_DiagPkInstalled" />
            <attributeSetEntry attributeName="b_DiagPkUsed" />
            <attributeSetEntry attributeName="b_ChgPkInstalled" />
            <attributeSetEntry attributeName="b_ChgPkUsed" />
            <attributeSetEntry attributeName="b_ConfigPkInstalled" />
            <attributeSetEntry attributeName="b_ConfigPkUsed" />
            <attributeSetEntry attributeName="oemInstalled" />
            <attributeSetEntry attributeName="oemUsed" />
            <attributeSetEntry attributeName="oemPack" />
            <attributeSetEntry attributeName="OEMQuery" />
            <attributeSetEntry attributeName="tuningPackInstalled" />
            <attributeSetEntry attributeName="tuningPackUsed" />
            <attributeSetEntry attributeName="tuningPackQuery" />
            <attributeSetEntry attributeName="DiagPkInstalled" />
            <attributeSetEntry attributeName="DiagPkUsed" />
            <attributeSetEntry attributeName="DiagPkQuery" />
            <attributeSetEntry attributeName="ChgPkInstalled" />
            <attributeSetEntry attributeName="ChgPkUsed" />
            <attributeSetEntry attributeName="ChgPkQuery" />
            <attributeSetEntry attributeName="ConfigPkInstalled" />
            <attributeSetEntry attributeName="ConfigPkUsed" />
            <attributeSetEntry attributeName="ConfigPkQuery" />
        </attributeSet>
        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions6"
                      collectorName="UNIXOracleInstanceLMSOptions6Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS Collection for all remaining options">
            <attributeSetEntry attributeName="b_activeDGuardInstalled" />
            <attributeSetEntry attributeName="b_activeDGuardUsed" />
            <attributeSetEntry attributeName="b_realAppTestInstalled" />
            <attributeSetEntry attributeName="b_realAppTestUsed" />
            <attributeSetEntry attributeName="b_advCompressInstalled" />
            <attributeSetEntry attributeName="b_advCompressUsed" />
            <attributeSetEntry attributeName="b_totalRecallInstalled" />
            <attributeSetEntry attributeName="b_totalRecallUsed" />
            <attributeSetEntry attributeName="b_exaDataInstalled" />
            <attributeSetEntry attributeName="b_exaDataUsed" />
            <attributeSetEntry attributeName="b_ChgPkInstalled" />
            <attributeSetEntry attributeName="b_ChgPkUsed" />
            <attributeSetEntry attributeName="b_ASProvPkInstalled" />
            <attributeSetEntry attributeName="b_ASProvPkUsed" />
            <attributeSetEntry attributeName="b_DBProvPkInstalled" />
            <attributeSetEntry attributeName="b_DBProvPkUsed" />
            <attributeSetEntry attributeName="b_SdProvPkInstalled" />
            <attributeSetEntry attributeName="b_SdProvPkUsed" />
            <attributeSetEntry attributeName="b_DMPkInstalled" />
            <attributeSetEntry attributeName="b_DMPkUsed" />
            <attributeSetEntry attributeName="activeDGuardInstalled" />
            <attributeSetEntry attributeName="activeDGuardUsed" />
            <attributeSetEntry attributeName="activeDGuardQuery" />
            <attributeSetEntry attributeName="realAppTestInstalled" />
            <attributeSetEntry attributeName="realAppTestUsed" />
            <attributeSetEntry attributeName="realAppTestQuery" />
            <attributeSetEntry attributeName="advCompressInstalled" />
            <attributeSetEntry attributeName="advCompressUsed" />
            <attributeSetEntry attributeName="advCompressQuery" />
            <attributeSetEntry attributeName="totalRecallInstalled" />
            <attributeSetEntry attributeName="totalRecallUsed" />
            <attributeSetEntry attributeName="totalRecallQuery" />
            <attributeSetEntry attributeName="exaDataInstalled" />
            <attributeSetEntry attributeName="exaDataUsed" />
            <attributeSetEntry attributeName="exaDataQuery" />
            <attributeSetEntry attributeName="ChgPkInstalled" />
            <attributeSetEntry attributeName="ChgPkUsed" />
            <attributeSetEntry attributeName="ChgPkQuery" />
            <attributeSetEntry attributeName="ASProvPkInstalled" />
            <attributeSetEntry attributeName="ASProvPkUsed" />
            <attributeSetEntry attributeName="ASProvPkQuery" />
            <attributeSetEntry attributeName="DBProvPkInstalled" />
            <attributeSetEntry attributeName="DBProvPkUsed" />
            <attributeSetEntry attributeName="DBProvPkQuery" />
            <attributeSetEntry attributeName="SdProvPkInstalled" />
            <attributeSetEntry attributeName="SdProvPkUsed" />
            <attributeSetEntry attributeName="SdProvPkQuery" />
            <attributeSetEntry attributeName="DMPkInstalled" />
            <attributeSetEntry attributeName="DMPkUsed" />
            <attributeSetEntry attributeName="DMPkQuery" />
        </attributeSet>

        <attributeSet attributeSetName="UNIXOracleInstanceLMSOptions7"
                      collectorName="UNIXOracleInstanceLMSOptions7Collector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance OWB Collection">
            <attributeSetEntry attributeName="b_owbInstalled" />
            <attributeSetEntry attributeName="b_owbUsed" />
            <attributeSetEntry attributeName="owbInstalled" />
            <attributeSetEntry attributeName="owbUsed" />
            <attributeSetEntry attributeName="OWBQuery" />
        </attributeSet>
        
        <attributeSet attributeSetName="UNIXOracleInstanceLMSRawDataDetail"
                      collectorName="UNIXOracleInstanceLMSRawDataDetailCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS_Detail Raw Data Collection">
            <attributeSetEntry attributeName="lmsScriptVersion" />
            <attributeSetEntry attributeName="lmsCollectTime" />
            <attributeSetEntry attributeName="lmsMachineID" />
            <attributeSetEntry attributeName="lmsDBName" />
            <attributeSetEntry attributeName="lmsBanner" />
            <attributeSetEntry attributeName="lmsDBRole" />
            <attributeSetEntry attributeName="lmsInstallDate" />
        </attributeSet>        

        <attributeSet attributeSetName="UNIXOracleInstanceLMSRawDataOptions"
                      collectorName="UNIXOracleInstanceLMSRawDataOptionsCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS_Options Raw Data Options Collection">
            <attributeSetEntry attributeName="lmsScriptVersion" />
            <attributeSetEntry attributeName="lmsCollectTime" />
            <attributeSetEntry attributeName="lmsMachineID" />
            <attributeSetEntry attributeName="lmsDBName" />
            <attributeSetEntry attributeName="lmsOptions" />
        </attributeSet>

        <attributeSet attributeSetName="UNIXOracleInstanceLMSRawDataDBAUsers"
                      collectorName="UNIXOracleInstanceLMSRawDataDBAUsersCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS_DBA_USERS Raw Data Collection">
            <attributeSetEntry attributeName="lmsScriptVersion" />
            <attributeSetEntry attributeName="lmsCollectTime" />
            <attributeSetEntry attributeName="lmsMachineID" />
            <attributeSetEntry attributeName="lmsDBName" />
            <attributeSetEntry attributeName="lmsDBAUsers" />
            <attributeSetEntry attributeName="lmsUserCount" />
        </attributeSet>

        <attributeSet attributeSetName="UNIXOracleInstanceLMSRawDataVLicense"
                      collectorName="UNIXOracleInstanceLMSRawDataVLicenseCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS_V$LICENSE Raw Data Collection">
            <attributeSetEntry attributeName="lmsScriptVersion" />
            <attributeSetEntry attributeName="lmsCollectTime" />
            <attributeSetEntry attributeName="lmsMachineID" />
            <attributeSetEntry attributeName="lmsDBName" />
            <attributeSetEntry attributeName="lmsVLicense" />
        </attributeSet>

        <attributeSet attributeSetName="UNIXOracleInstanceLMSRawDataVSession"
                      collectorName="UNIXOracleInstanceLMSRawDataVSessionCollector"
                      collectionInterval="-1"
                      displayLabel="UNIX Oracle Instance LMS_V$SESSION Raw Data Collection">
            <attributeSetEntry attributeName="lmsScriptVersion" />
            <attributeSetEntry attributeName="lmsCollectTime" />
            <attributeSetEntry attributeName="lmsMachineID" />
            <attributeSetEntry attributeName="lmsDBName" />
            <attributeSetEntry attributeName="lmsVSession" />
        </attributeSet>       
        <attrSysDefValue attributeName="dbaFeatures">NULL</attrSysDefValue>
        <attrSysDefValue attributeName="b_partInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_partUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_olapInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_olapUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_racInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_racUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_dmInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_dmUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_spatialInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_spatialUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_lbl_security_installed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_lbl_security_used">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_dbVaultInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_dbVaultUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_auditVaultInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_auditVaultUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_contentDBInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_contentDBUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_recordDBInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_recordDBUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_advSecInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_advSecUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_oemInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_oemUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_tuningPackInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_tuningPackUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DiagPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DiagPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ChgPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ChgPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ConfigPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ConfigPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_activeDGuardInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_activeDGuardUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_realAppTestInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_realAppTestUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_advCompressInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_advCompressUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_totalRecallInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_totalRecallUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_exaDataInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_exaDataUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ASProvPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_ASProvPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DBProvPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DBProvPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_SdProvPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_SdProvPkUsed">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DMPkInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_DMPkUsed">0</attrSysDefValue> 
        <attrSysDefValue attributeName="b_owbInstalled">0</attrSysDefValue>
        <attrSysDefValue attributeName="b_owbUsed">0</attrSysDefValue>
    </element>

    <!-- ............................................................... -->
    <!-- .......           Oracle package setup              ........... -->
    <!-- ............................................................... -->

    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceDBOptions"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions2"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions3"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions4"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions5"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions6"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSOptions7"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSRawDataDetail"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSRawDataOptions"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSRawDataDBAUsers"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSRawDataVLicense"/>
    <packageAttributeSet packageName="UNIXOracleLMS" attributeSetName="UNIXOracleInstanceLMSRawDataVSession"/>

    <!-- ............................................................... -->
    <!-- .......            Unix Oracle Collectors           ........... -->
    <!-- ............................................................... -->

    <collector
        collectorName="UNIXOracleInstanceDBOptionsCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceDBOptionsStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptionsCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptionsStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions2Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions2StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions3Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions3StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions4Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions4StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions5Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions5StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions6Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions6StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSOptions7Collector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSOptions7StaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSRawDataDetailCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSRawDataDetailStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSRawDataOptionsCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSRawDataOptionsStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSRawDataDBAUsersCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSRawDataDBAUsersStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSRawDataVLicenseCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSRawDataVLicenseStaticScript">
    </collector>

    <collector
        collectorName="UNIXOracleInstanceLMSRawDataVSessionCollector"
        connectionMethodPath="root.types.collection.connectionMethod.perl.databaseConnection.OracleConnection"
        collectionScriptName="UNIXOracleInstanceLMSRawDataVSessionStaticScript">
    </collector>


    <!-- ............................................................... -->
    <!-- .......            UNIX Oracle collection scripts   ........... -->
    <!-- ............................................................... -->

    <scriptTable
        scriptName="UNIXOracleInstanceDBOptionsStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};

        eval {
            &echo("Querying from DB parameter from V_OPTION..");
            my $sqlDBOption = "SELECT DISTINCT '<BDNA=>'||PARAMETER||'<BDNA>'||VALUE||'<=BDNA>' FROM SYS.V_\$OPTION";
            my @outputDBOption = &execSQL($host, $sqlDBOption, "dbOption");
            my $outputCombined = join('', @outputDBOption);
            $outputCombined =~ s/[\r|\n]//g;
            $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
            @outputDBOption = split("\n",$outputCombined);
            while (@outputDBOption) {
                $_ = shift(@outputDBOption);
                if (/^<BDNA=>(.*?)<BDNA>(.*?)<=BDNA>/) {
                    my ($param, $value) = ($1, $2);
                    if ($param !~ /PARAMETER/i) {
                        if ($resultString) {
                            $resultString .= '<BDNA,>';
                        }
                        $resultString .= 'PARAMETER=' . $param;
                        $resultString .= '<BDNA,1>VALUE=' . $value;
                    } elsif (/^(no rows selected)$/) {
                       $sqlDBOption .= $1 . "\n";
                       break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                       $sqlDBOption .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                       $sqlDBOption .= $1 . "\n";
                    }
                }
            }
            $BDNA_Results{"vOptions"} = $resultString;
        };

        eval {
            $resultString = '';
            &echo("Querying from DBA_FEATURE_USAGE_STATISTICS..");
            my $sqlDBAFeature = "SELECT '<BDNA=>'||NAME||'<BDNA>'||DETECTED_USAGES" .
                             "||'<BDNA>'||CURRENTLY_USED||'<BDNA>'||FIRST_USAGE_DATE" .
                             "||'<BDNA>'||LAST_USAGE_DATE||'<=BDNA>'".
                             " FROM DBA_FEATURE_USAGE_STATISTICS";
            my @outputDBAFeature = &execSQL($host, $sqlDBAFeature, "dba_features");
            my $outputCombined = join('', @outputDBAFeature);
            $outputCombined =~ s/[\r|\n]//g;
            $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
            @outputDBAFeature = split("\n",$outputCombined);
            while (@outputDBAFeature) {
                $_ = shift(@outputDBAFeature);
                if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {
                    my ($name, $detUsage, $curUsed, $firstUsed, $lastUsed) = ($1, $2, $3, $4, $5);
                    if ($name !~ /NAME/i) {
                        if ($resultString) {
                            $resultString .= '<BDNA,>';
                        }
                        $resultString .= 'FEATURE_NAME=' . $name;
                        $resultString .= '<BDNA,1>DETECTED=' . $detUsage;
                        $resultString .= '<BDNA,1>CUR_USED=' . $curUsed;
                        $resultString .= '<BDNA,1>FIRST_USE=' . $firstUsed;
                        $resultString .= '<BDNA,1>LAST_USE=' . $lastUsed;
                    } elsif (/^(no rows selected)$/) {
                        $sqlDBAFeature .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $sqlDBAFeature .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $sqlDBAFeature .= $1 . "\n";
                    }
                }
            }
            $BDNA_Results{"dbaFeatures"} = $resultString;
        };
        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptionsStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$version);

        eval {
            $resultString = '';
            &echo("Test Partitioning intall option..");
            my $sqlPartition = "SELECT 'ORACLE PARTITIONING INSTALLED: '||'<BDNA>'||".
                               "value||'<BDNA>' FROM V\$OPTION WHERE PARAMETER='Partitioning'";
 
            my @outputPartition = &execSQL($host, $sqlPartition, "Partition");
            my $lmsParQuery = "CHECKING TO SEE IF PARTITIONING IS INSTALLED\/USED...\n";
            $lmsParQuery .= "SQL> SELECT 'ORACLE PARTITIONING INSTALLED: '||value \"PARTITIONING\" FROM V\$OPTION WHERE PARAMETER='Partitioning';\n";
            $lmsParQuery .= "PARTITIONING\n";
            $lmsParQuery .= "------------------\n";
            my $partInstalled = 0;
            while (@outputPartition) {
                $_ = shift(@outputPartition);
                if (/^ORACLE PARTITIONING INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $partValue = $1;
                    if ($partValue eq 'TRUE') {
                        $partInstalled =1;
                    }
                    $lmsParQuery .= "ORACLE PARTITIONING INSTALLED: $partValue\n";
                    $BDNA_Results{"lmsParQuery"} = $lmsParQuery;

                    break;
                } elsif (/^(no rows selected)$/) {
                    $lmsParQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $lmsParQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $lmsParQuery .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"partInstalled"} = $partInstalled;
            $BDNA_Results{"b_partInstalled"} = $partInstalled;
            $BDNA_Results{"lmsParQuery"} .= "\n";
        };


        $BDNA_Results{"lmsParQuery"} .= "CHECKING TO SEE IF PARTITIONING IS USED...\n";
        if ($version =~ /^10\.2.*|^11\..*/) {
            eval {
                $resultString = '';
                &echo("Querying from DBA_FEATURE_USAGE_STATISTICS FOR Partitioning Usage..");
                my $sqlDBAPart = "SELECT '<BDNA=>'||NAME||'<BDNA>'||DETECTED_USAGES" .
                                 "||'<BDNA>'||CURRENTLY_USED||'<BDNA>'||FIRST_USAGE_DATE" .
                                 "||'<BDNA>'||LAST_USAGE_DATE||'<=BDNA>'".
                                 " FROM DBA_FEATURE_USAGE_STATISTICS ".
                                 "WHERE NAME='Partitioning (user)'";
                my $DBA_FEATURE_USAGE = "SQL> SELECT NAME, DETECTED_USAGES, CURRENTLY_USED, FIRST_USAGE_DATE, LAST_USAGE_DATE ".
                                        "FROM DBA_FEATURE_USAGE_STATISTICS WHERE NAME='Partitioning (user)';\n";
                my $partUsed =0;
                my $printDBAFeatureHeader =0;
                my @outputDBAFeature = &execSQL($host, $sqlDBAPart, "dbaPart");
                my $outputCombined = join('', @outputDBAFeature);
                $outputCombined =~ s/[\r|\n]//g;
                $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
                @outputDBAFeature = split("\n",$outputCombined);
                while (@outputDBAFeature) {
                    $_ = shift(@outputDBAFeature);
                    if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {
                        my ($name, $detUsage, $curUsed, $firstUsed, $lastUsed) = ($1, $2, $3, $4, $5);
                        if (!$printDBAFeatureHeader) {
                            $printDBAFeatureHeader =1;
                            $DBA_FEATURE_USAGE .= "NAME         DETECTED_USAGES         CURRENTLY_USED         " .
                                                  "FIRST_USAGE_DATE         LAST_USAGE_DATE\n";
                            $DBA_FEATURE_USAGE .= "------------ ----------------------- ---------------------- " .
                                                  "----------------- --------------------\n";
                        }
                        $DBA_FEATURE_USAGE .= $name . " ";
                        $DBA_FEATURE_USAGE .= $detUsage . " ";
                        $DBA_FEATURE_USAGE .= $curUsed . " ";
                        $DBA_FEATURE_USAGE .= $firstUsed . " ";
                        $DBA_FEATURE_USAGE .= $lastUsed. "\n";
                        if ($curUsed eq 'TRUE') {
                            $partUsed =1;
                        }                        
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                        break;
                    }
                }
                $BDNA_Results{"partUsed"} = $partUsed;
                $BDNA_Results{"b_partUsed"} = $partUsed;
                $BDNA_Results{"lmsParQuery"} .= $DBA_FEATURE_USAGE;
                $BDNA_Results{"lmsParQuery"} .= "\n";
            };
        }

        eval {
            $resultString = '';
            &echo("Querying Partitioning segment..");
            my $sqlPartSegment = "SELECT '<BDNA>'||OWNER||'<BDNA>'||SEGMENT_TYPE||".
                                 "'<BDNA>'||SEGMENT_NAME||'<BDNA>' FROM DBA_SEGMENTS".
                                 " WHERE PARTITION_NAME IS NOT NULL";
            my @outputPartSegment = &execSQL($host, $sqlPartSegment, "partitionSegments");

            my $lmsParOwnerQuery .= "SQL> SELECT OWNER, SEGMENT_TYPE, SEGMENT_NAME FROM DBA_SEGMENTS  WHERE PARTITION_NAME IS NOT NULL;\n";

            my $partUsed = 0;
            my $printParOwnerQueryHeader =0;
            while (@outputPartSegment) {
                $_ = shift(@outputPartSegment);
                if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                    my ($owner, $segType, $segName) = ($1, $2, $3);

                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= 'OWNER=' . $owner;               
                    $resultString .= '<BDNA,1>SEGMENT_TYPE=' . $segType;
                    $resultString .= '<BDNA,1>SEGMENT_NAME=' . $segName;
                    if (!$printParOwnerQueryHeader) {
                        $printParOwnerQueryHeader =1;
                        $lmsParOwnerQuery .= "OWNER       SEGMENT_TYPE   SEGMENT_NAME     \n";
                        $lmsParOwnerQuery .= "----------- -------------- -----------------\n";
                    }
                    $lmsParOwnerQuery .= $owner . " " . $segType . " " . $segName . "\n";

                    my @defSchemas =qw/ANONYMOUS DBSNMP HR JTI JTR JUNK_PS ODM ODM_MTR OE OLAPSYS ORDPLUGINS ORDSYS OSM OUTLN OWAPUB PERFSTAT PM PORTAL30 PORTAL30_DEMO PORTAL30_PUBLIC PORTAL30_SSO PORTAL30_SSO_PS PORTAL30_SSO_PUBLIC PTE PTG QS QS_ADM QS_CB QS_CBADM QS_CS QS_ES QS_OS QS_WS REPADMIN SCOTT SH SSOSDK SYS SYSTEM TRACESVR WH WMSYS XDB PON POS PQH PQP PRP PSA PSB PSP PSR PTX PV QA QOT QP QRM RCM RG RHX RLA RLM RMG RRC RRS SHT SQLAP SQLGL SSP SYSADMIN TEST VEA VEH WIP WMA WMS WPS WSH WSM XDO XDP XLA XLE XNA XNB XNC XNI XNM XNP XNS XNT XTR ZFA ZPB ZSA ZX CTSYS MDSYS OLAPSVR ORDPLUGINS OLAPDBA OLAPSYS ORDSYS OUTLN AURORA$JIS$UTILITY$ AURORA$ORB$UNAUTHENTICATED DCM INTERNET_APPSERVER_REGISTRY IP OCA ORAOCA_PUBLIC ORASSO OSE$HTTP$ADMIN OWA_MGR UDDISYS WFADMIN WIRELESS WK_PROXY WKSYS WK_Test CLKRT ODS BLEWIS CDOUGLAS KWALKER SPIERSON DISCOVERER5 DSGATEWAY DSSYS ODS ODSCOMMON ORASSO ORASSO_DS ORASSO_PA ORASSO_PS ORASSO_PUBLIC PORTAL PORTAL_APP PORTAL_DEMO PORTAL_PUBLIC/;

                    my @notArr = ();
                    if (grep { $owner eq $_ } @defSchemas) {
                    } else {
                        push (@notArr, $owner);
                    }
                    if (@notArr) {
                        $partUsed = 1;
                    }

                } elsif (/^(no rows selected)$/) {
                    $lmsParOwnerQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $lmsParOwnerQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $lmsParOwnerQuery .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"partUsed"} = $partUsed;
            $BDNA_Results{"b_partUsed"} = $partUsed;
            $BDNA_Results{"parSegOwner"} = $resultString;
            $BDNA_Results{"lmsParQuery"} .= $lmsParOwnerQuery . "\n";
        };

        eval {
            $resultString = '';
            &echo("Test OLAP installedOption..");
            my $sqlOLAP = "SELECT 'ORACLE OLAP INSTALLED: '||'<BDNA>'||value||'<BDNA>' FROM V\$OPTION WHERE PARAMETER='OLAP'";
            my @outputOLAP  = &execSQL($host, $sqlOLAP, "OLAP");

            my $lmsOlapQuery = "CHECK TO SEE IF OLAP OPTION IS INSTALLED/USED...\n";
            $lmsOlapQuery .= "SQL> SELECT 'ORACLE OLAP INSTALLED: '||value \"OLAP\" FROM V\$OPTION WHERE PARAMETER='OLAP';\n";
            $lmsOlapQuery .= "OLAP\n";
            $lmsOlapQuery .= "------\n";
            my $olapInstalled = 0;

            while (@outputOLAP) {
                $_ = shift(@outputOLAP);
                if (/^ORACLE OLAP INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $olapValue = $1;
                    if ($olapValue eq 'TRUE') {
                        $olapInstalled = 1;
                    }
                    $lmsOlapQuery .= "ORACLE OLAP INSTALLED: $olapValue\n";
                    $BDNA_Results{"lmsOlapQuery"} = $lmsOlapQuery;

                    break;
                } elsif (/^(no rows selected)$/) {
                    $lmsOlapQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $lmsOlapQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $lmsOlapQuery .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"olapInstalled"} = $olapInstalled;
            $BDNA_Results{"b_olapInstalled"} = $olapInstalled;
            $BDNA_Results{"lmsOlapQuery"} .= $lmsOlapQuery;
            $BDNA_Results{"lmsOlapQuery"} .= "\n";
        };
       
        eval {
            $resultString = '';
            &echo("Count rows of OLAP catalogs");
            my $sqlOLAPCATCNT = "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM OLAPSYS.DBA\$OLAP_CUBES WHERE OWNER <> 'SH'";
            my @outputOLAPCATCNT = execSQL($host, $sqlOLAPCATCNT, "olapCat");
            my $OLAPCATCNTQuery = "CHECKING TO SEE IF OLAP OPTION IS USED...\n";
            $OLAPCATCNTQuery .= "CHECKING FOR OLAP CATALOGS...\n";
            $OLAPCATCNTQuery .= "SQL> SELECT COUNT(*) \"OLAP CATALOGS\" FROM OLAPSYS.DBA\$OLAP_CUBES WHERE OWNER <> 'SH';\n";
            $OLAPCATCNTQuery .= "OLAP CATALOGS\n";
            $OLAPCATCNTQuery .= "----------------\n";
            my $olapUsed = 0;
            while (@outputOLAPCATCNT) {
                $_ = shift(@outputOLAPCATCNT);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    $BDNA_Results{"OLAPCATCNT"} = $1;
                    $OLAPCATCNTQuery .= $1 . "\n";

                    if ($BDNA_Results{"OLAPCATCNT"} > 0) {
                        $olapUsed = 1;
                    }
                    break;
                } elsif (/^(no rows selected)$/) {
                    $OLAPCATCNTQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $OLAPCATCNTQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $OLAPCATCNTQuery .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"lmsOlapQuery"} .= $OLAPCATCNTQuery;
            $BDNA_Results{"lmsOlapQuery"} .= "\n\n";
            $BDNA_Results{"olapUsed"} = $olapUsed;
            $BDNA_Results{"b_olapUsed"} = $olapUsed;
        };


        eval {
            $resultString = '';
            &echo("Checking namespace of Analytical Workspaces");
            my $sqlAWSCNT = "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM DBA_AWS";
            my @outputAWSCNT = execSQL($host, $sqlAWSCNT, "AWSCNT");

            my $AWSCNTQuery = "CHECKING FOR ANALYTICAL WORK SPACES...\n"; 
            $AWSCNTQuery .= "SQL> SELECT COUNT(*) \"Analytical Workspaces\" FROM DBA_AWS;\n";
            $AWSCNTQuery .= "Analytical Workspaces\n";
            $AWSCNTQuery .= "-------------------------------------\n";

            my $awsUsed = 0;
            while (@outputAWSCNT) {
                $_ = shift(@outputAWSCNT);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    $BDNA_Results{"AWS_CNT"} = $1;
                    $AWSCNTQuery .= $1 . "\n";
                    break;
                } elsif (/^(no rows selected)$/) {
                    $AWSCNTQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $AWSCNTQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $AWSCNTQuery .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"lmsOlapQuery"} .= $AWSCNTQuery;
            $BDNA_Results{"lmsOlapQuery"} .= "\n\n";


            if ($BDNA_Results{"AWS_CNT"} > 0) {
                $awsUsed =0;
                $resultString = '';
                &echo("Query OLAP Analytical WorkSpacen..");
                my $sqlAWS = "SELECT '<BDNA=>'||OWNER||'<BDNA>'||AW_NUMBER||'<BDNA>'||AW_NAME".
                             "||'<BDNA>'||PAGESPACES||'<BDNA>'||GENERATIONS||'<=BDNA>' FROM DBA_AWS";

                my $awsQuery = "SQL> SELECT OWNER, AW_NUMBER, AW_NAME, PAGESPACES, GENERATIONS FROM DBA_AWS;\n";
                $awsQuery .= "OWNER                           AW_NUMBER AW_NAME                        PAGESPACES GENERATIONS\n";
                $awsQuery .= "------------------------------ ---------- ------------------------------ ---------- -----------\n";


                my @outputAWS = &execSQL($host, $sqlAWS, "AWS");
                my $outputCombined = join('', @outputAWS);
                $outputCombined =~ s/[\r|\n]//g;
                $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
                @outputAWS = split("\n",$outputCombined);
                while (@outputAWS) {
                    $_ = shift(@outputAWS);
                    if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {
                        my ($owner, $awNumber, $awName, $pageSpaces, $generation) = ($1, $2, $3, $4, $5);

                        if ($resultString) {
                            $resultString .= '<BDNA,>';
                        }
                        $resultString .= 'OWNER=' . $owner;
                        if (!($awName =~ /^(EXPRESS|CWMTOECM|AWCREATE|AWCREATE10G|AWMD|AWREPORT|AWXML)$/)) {
                            $awsUsed = 1;
                        }
                        $resultString .= '<BDNA,1>AW_NUMBER=' . $awNumber;
                        $resultString .= '<BDNA,1>AW_NAME=' . $awName;
                        $resultString .= '<BDNA,1>PAGESPACES=' . $pageSpaces;
                        $resultString .= '<BDNA,1>GENERATION=' . $generation;
                        $awsQuery .= $owner . " " . $awNumber . " " . 
                                     $awName . " " . $pageSpaces . " " . 
                                     $generation . "\n";
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $awsQuery .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $awsQuery .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $awsQuery .= $1 . "\n";
                        break;
                    }
                }
                $BDNA_Results{"AWS"} = $resultString;
                $BDNA_Results{"lmsOlapQuery"} .= $awsQuery . "\n";
            }
            $BDNA_Results{"olapUsed"} = $awsUsed;
            $BDNA_Results{"b_olapUsed"} = $awsUsed;
        };
        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions2StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});

        eval {
            &echo("Test if RAC is enabled.");
            my $sqlRACEnabled = "SELECT 'ORACLE RAC INSTALLED: '||'<BDNA>'||VALUE||'<BDNA>'".
                                " FROM V\$OPTION WHERE PARAMETER ='Real Application Clusters'";
            my @outputRAC = &execSQL($host, $sqlRACEnabled, "RACEnabled");

            my $racEnabledQuery= "SQL> SELECT 'ORACLE RAC INSTALLED: '||VALUE".
                                 " \"RAC(REAL APPLICATION CLUSTERS)\" FROM V\$OPTION WHERE ".
                                 "PARAMETER ='Real Application Clusters'\n";
            $racEnabledQuery .= "RAC(REAL APPLICATION CLUSTERS)\n";
            $racEnabledQuery .= "-------------------------------------\n";

            my $racEnabled = 0;
            while (@outputRAC) {
                $_ = shift(@outputRAC);
                if (/^ORACLE RAC INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $racInstalled = $1;
                    if ($racInstalled eq 'TRUE') {
                        $racEnabled = 1;
                    } 
                    $racEnabledQuery .= "ORACLE RAC INSTALLED: $racInstalled\n";
                    break;
                } elsif (/^(no rows selected)$/) {
                    $racEnabledQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $racEnabledQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $racEnabledQuery .= $1 . "\n";
                    break;
                }

            }
            $BDNA_Results{"racInstalled"} = $racEnabled;
            $BDNA_Results{"b_racInstalled"} = $racEnabled;
            $BDNA_Results{"lmsRACQuery"} .= $racEnabledQuery;
            $BDNA_Results{"lmsRACQuery"} .= "\n";

        };

        eval {
            &echo("Query Cluster database..");
            my $sqlClusterDB = "SELECT '<BDNA>'||NAME||'<BDNA>'||VALUE||'<BDNA>' FROM GV\$PARAMETER WHERE NAME='cluster_database'";
            my @outputClusterDB= &execSQL($host, $sqlClusterDB, "ClusterDB");

            my $clusterDB = "CHECKING TO SEE IF RAC IS INSTALLED ..\n"; 
            $clusterDB .= "SQL> SELECT NAME, VALUE FROM GV\$PARAMETER WHERE NAME='cluster_database'\n";
            $clusterDB .= "NAME  VALUE\n";
            $clusterDB .= "----- ------\n";

            my $racUsed = 0;
            while (@outputClusterDB) {
                $_ = shift(@outputClusterDB);
                if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                    my ($name, $value) = ($1, $2);

                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= 'NAME=' . $name;
                    $resultString .= '<BDNA,1>VALUE=' . $value;
                    $clusterDB .= $name ." " . $value . "\n";
                    if ($value eq 'TRUE') {
                        $racUsed = 1;
                    }
                    break;
                } elsif (/^(no rows selected)$/) {
                    $clusterDB .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $clusterDB .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $clusterDB .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"racUsed"} = $racUsed;
            $BDNA_Results{"b_racUsed"} = $racUsed;

            $BDNA_Results{"lmsRACQuery"} .= $clusterDB;
            $BDNA_Results{"lmsRACQuery"} .= "\n";
            $BDNA_Results{"clusterDB"} = $resultString;
        };

        eval {
            $resultString = '';
            &echo("Query cluster instance..");
            my $sqlClusterInst = "SELECT '<BDNA>'||INSTANCE_NAME||'<BDNA>'||HOST_NAME||'<BDNA>' FROM GV\$INSTANCE";
            my @outputClusterInst= &execSQL($host, $sqlClusterInst, "ClusterInst");

            my $clusterInst = "CHECKING TO SEE IF RAC IS BEING USED...\n"; 
            $clusterInst .= "SQL> SELECT INSTANCE_NAME, HOST_NAME FROM GV\$INSTANCE;\n";
            $clusterInst .= "INSTANCE_NAME HOST_NAME\n";
            $clusterInst .= "------------- ----------\n";

            my $count = 0;
            while (@outputClusterInst) {
                $_ = shift(@outputClusterInst);
                if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                    my ($instance_name, $host_name) = ($1, $2);
                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= 'INSTANCE_NAME=' . $instance_name;
                    $resultString .= '<BDNA,1>HOST_NAME=' . $host_name;
                    $clusterInst .= $instance_name . " " . $host_name . "\n";
                    $count++;
                    if ($count > 1) {
                        $BDNA_Results{"racUsed"} = 1;
                        $BDNA_Results{"b_racUsed"} = 1;
                    }                    
                } elsif (/^(no rows selected)$/) {
                    $clusterInst .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $clusterInst .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $clusterInst .= $1 . "\n";
                    break;
                }
            }
            $BDNA_Results{"clusterInst"} = $resultString;
            $BDNA_Results{"lmsRACQuery"} .= $clusterInst;
            $BDNA_Results{"lmsRACQuery"} .= "\n";
        };

        eval {
            $resultString = '';
            &echo("Test Spatial option is installed..");
            my $sqlSpatialEnabled = "SELECT 'ORACLE SPATIAL INSTALLED: '||'<BDNA>'||VALUE||'<BDNA>'".
                                    " FROM V\$OPTION WHERE PARAMETER ='Spatial'";
            my @outputSpatial = &execSQL($host, $sqlSpatialEnabled, "SpatialEnabled");
            
            my $spatialEnabledQuery = "SQL> SELECT 'ORACLE SPATIAL INSTALLED: '||VALUE".
                                      " \"SPATIAL\" FROM V\$OPTION WHERE ".
                                      "PARAMETER ='Spatial'\n";
            $spatialEnabledQuery .= "SPATIAL\n";
            $spatialEnabledQuery .= "---------\n";

            my $spatialEnabled =0;
            while (@outputSpatial) {
                $_ = shift(@outputSpatial);
                if (/^ORACLE SPATIAL INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $spatialInstalled = $1;
                    if ($spatialInstalled eq 'TRUE') {
                        $spatialEnabled =1;
                    }
                    $spatialEnabledQuery .= "ORACLE SPATIAL INSTALLED: $spatialInstalled\n";
                    break;
                } elsif (/^(no rows selected)$/) {
                    $spatialEnabledQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $spatialEnabledQuery .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $spatialEnabledQuery .= $1 . "\n";
                }
            }
            $BDNA_Results{"spatialInstalled"} = $spatialEnabled;
            $BDNA_Results{"b_spatialInstalled"} = $spatialEnabled;
            $BDNA_Results{"lmsSpatialQuery"} .= $spatialEnabledQuery;
            $BDNA_Results{"lmsSpatialQuery"} .= "\n";
        };

        if (!($version =~ /^11\.2.*/)) {
            eval {
                $resultString = '';
                &echo("Query Count of SDO_GEOM_METADATA..");
                my $sqlCNT_SDO_GEOM_METADATA= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM ALL_SDO_GEOM_METADATA";
                my @outputCNT_SDO_GEOM_METADATA=&execSQL($host, $sqlCNT_SDO_GEOM_METADATA, "ALL_SDO_GEOM_METADATA");
                my $CNT_SDO_GEOM_METADATA = "SQL> SELECT COUNT(*) \"ALL_SDO_GEOM_METADATA\" FROM ALL_SDO_GEOM_METADATA;\n";

                my $spatialUsed = 0;
                my $printCNT_SDO_GEOM_METADATAheader =0;
                while (@outputCNT_SDO_GEOM_METADATA) {
                    $_ = shift(@outputCNT_SDO_GEOM_METADATA);
                    if (/^<BDNA>(.*?)<BDNA>$/) {                        
                        $BDNA_Results{"CNT_SDO_GEOM_METADATA"} = $1;
                        if (!$printCNT_SDO_GEOM_METADATAheader) {
                            $printCNT_SDO_GEOM_METADATAheader=1;
                            $CNT_SDO_GEOM_METADATA .= "ALL_SDO_GEOM_METADATA\n";
                            $CNT_SDO_GEOM_METADATA .= "----------------------\n";
                        }
                        $CNT_SDO_GEOM_METADATA .= $1 . "\n";
                        if ($BDNA_Results{"CNT_SDO_GEOM_METADATA"} > 0) {
                            $spatialUsed = 1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_SDO_GEOM_METADATA .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_SDO_GEOM_METADATA .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_SDO_GEOM_METADATA .= $1 . "\n";
                    }
                }
                $BDNA_Results{"spatialUsed"} = $spatialUsed;
                $BDNA_Results{"b_spatialUsed"} = $spatialUsed;
                $BDNA_Results{"lmsSpatialQuery"} .= $CNT_SDO_GEOM_METADATA;
                $BDNA_Results{"lmsSpatialQuery"} .= "\n\n";
            };
        } else {
            eval {
                $resultString = '';
                &echo("Querying from DBA_FEATURE_USAGE_STATISTICS FOR SPATIAL Usage..");
                my $sqlDBAFeatureSP = "SELECT '<BDNA=>'||NAME||'<BDNA>'||DETECTED_USAGES" .
                                      "||'<BDNA>'||CURRENTLY_USED||'<BDNA>'||FIRST_USAGE_DATE" .
                                      "||'<BDNA>'||LAST_USAGE_DATE||'<=BDNA>'".
                                      " FROM DBA_FEATURE_USAGE_STATISTICS".
                                      " WHERE NAME='Spatial'";
                my $DBA_FEATURE_USAGE = "SQL> SELECT NAME, DETECTED_USAGES, CURRENTLY_USED, FIRST_USAGE_DATE, LAST_USAGE_DATE ".
                                        "FROM DBA_FEATURE_USAGE_STATISTICS WHERE NAME='Spatial';\n";
                my $printDBAFeatureSPheader =0;
                my $spatialUsed =0;
                my @outputDBAFeatureSP = &execSQL($host, $sqlDBAFeatureSP, "dba_features_sp");
                my $outputCombined = join('', @outputDBAFeatureSP);
                $outputCombined =~ s/[\r|\n]//g;
                $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
                @outputDBAFeatureSP = split("\n",$outputCombined);
                while (@outputDBAFeatureSP) {
                    $_ = shift(@outputDBAFeatureSP);
                    if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {
                        my ($name, $detUsage, $curUsed, $firstUsed, $lastUsed) = ($1, $2, $3, $4, $5);
                        if (!$printDBAFeatureSPheader) {
                            $printDBAFeatureSPheader =1;
                            $DBA_FEATURE_USAGE .= "NAME". " ". "DETECTED_USAGES". "  " . "CURRENTLY_USED". "  " .
                                                  "FIRST_USAGE_DATE". "  " ."LAST_USAGE_DATE". "\n";
                            $DBA_FEATURE_USAGE .= "--------------------------  ". "---------------  ". "--------------  " .
                                                  "-----------------  ". "-----------------\n";
                        }
                            
                        $DBA_FEATURE_USAGE .= $name . " ";
                        $DBA_FEATURE_USAGE .= $detUsage . " ";
                        $DBA_FEATURE_USAGE .= $curUsed . " ";
                        $DBA_FEATURE_USAGE .= $firstUsed . " ";
                        $DBA_FEATURE_USAGE .= $lastUsed. "\n";
                        if ($curUsed eq 'TRUE') {
                            $spatialUsed =1;
                        }
                    } elsif (/^(no rows selected)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                    }
                }

                $BDNA_Results{"lmsSpatialQuery"} .= $DBA_FEATURE_USAGE;
                $BDNA_Results{"lmsSpatialQuery"} .= "\n";
                $BDNA_Results{"spatialUsed"} = $spatialUsed;
                $BDNA_Results{"b_spatialUsed"} = $spatialUsed;
            };
        }

        eval {
            $resultString = '';
            &echo("Test Data Mining is installed..");
            my $sqlDM = "SELECT 'ORACLE DATA MINING INSTALLED: '||'<BDNA>'||VALUE||'<BDNA>' FROM V\$OPTION WHERE PARAMETER like '%Data Mining'";
            my @outputDM = &execSQL($host, $sqlDM, "DMEnabled");
            my $dmQuery = "CHECKING TO SEE IF DATA MINING OPTION IS INSTALLED..\n"; 
            $dmQuery .= "SQL> SELECT 'ORACLE DATA MINING INSTALLED: '||VALUE \"DATA MINING\" FROM V\$OPTION WHERE PARAMETER like '%Data Mining';\n";
            my $printDMEnabledheader =0;
            my $dmEnabled = 0;
            while (@outputDM) {
                $_ = shift(@outputDM);
                if (/^ORACLE DATA MINING INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $dmInstalled = $1;
                    if (!$printDMEnabledheader) {
                        $printDMEnabledheader = 1;
                        $dmQuery .= "DATA MINING\n";
                        $dmQuery .= "-----------------\n";
                    }
                    if ($dmInstalled eq 'TRUE') {
                        $dmEnabled = 1;
                    }
                    $dmQuery .= "ORACLE DATA MINING INSTALLED: $dmInstalled\n";
                    break;
                } elsif (/^(no rows selected)$/) {
                    $dmQuery .= $1 . "\n";
                    $dmEnabled =0;
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $dmQuery .= $1 . "\n";
                    $dmEnabled =0;
                } elsif (/^(\d+ rows selected.)$/) {
                    $dmQuery .= $1 . "\n";
                    $dmEnabled =0;
                }                     
            }
            $BDNA_Results{"dmInstalled"} = $dmEnabled;
            $BDNA_Results{"b_dmInstalled"} = $dmEnabled;
            $BDNA_Results{"lmsDMQuery"} .= $dmQuery;
            $BDNA_Results{"lmsDMQuery"} .= "\n";
        };

        if ($version =~ /^9\..*/) {
            eval {
                $resultString = '';
                &echo("Query Count of DM Model v9..");
                my $sqlCNT_DM_MDL9= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM ODM.ODM_MINING_MODEL";
                my @outputCNT_DM_MDL9A =&execSQL($host, $sqlCNT_DM_MDL9, "DML9");

                my $CNT_DM_MDL9 = "CHECKING TO SEE IF DATA MINING OPTION IS USED..\n"; 
                $CNT_DM_MDL9 .= "SQL> SELECT COUNT(*) \"Data_Mining_Model\" FROM ODM.ODM_MINING_MODEL;\n";

                my $printCNT_DM_MDL9header=0;
                my $dmUsed =0;
                while (@outputCNT_DM_MDL9A) {
                    $_ = shift(@outputCNT_DM_MDL9A);
                    if (/^<BDNA>(.*?)<BDNA>$/) {
                        $BDNA_Results{"CNT_DM_MDL9"} = $1;
                        if (!$printCNT_DM_MDL9header) {
                            $printCNT_DM_MDL9header =1;
                            $CNT_DM_MDL9 .= "Data_Mining_Model\n";
                            $CNT_DM_MDL9 .= "-------------------\n";
                        }
                        $CNT_DM_MDL9 .= $1 . "\n";
                        if ($BDNA_Results{"CNT_DM_MDL9"} > 0) {
                            $dmUsed =1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_DM_MDL9 .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_DM_MDL9 .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_DM_MDL9 .= $1 . "\n";
                    }
                }
                $BDNA_Results{"dmUsed"} = $dmUsed;
                $BDNA_Results{"b_dmUsed"} = $dmUsed;
                $BDNA_Results{"lmsDMQuery"} .= $CNT_DM_MDL9;
                $BDNA_Results{"lmsDMQuery"} .= "\n";
            };
        } elsif ($version =~ /^10\.1.*/) {
            eval {
                $resultString = '';
                &echo("Query Count of DM Object v10..");
                my $sqlCNT_DM_OBJ10v1= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM DMSYS.DM\$OBJECT";
                my @outputCNT_DM_OBJ10v1 =&execSQL($host, $sqlCNT_DM_OBJ10v1, "DMOBJ10v1");
                my $CNT_DM_OBJ10v1 = "CHECKING TO SEE IF DATA MINING OPTION IS USED..\n"; 
                $CNT_DM_OBJ10v1 .= "SQL> SELECT COUNT(*) \"Data_Mining_Objects\" FROM DMSYS.DM\$OBJECT;\n";

                my $dmUsed =0;
                my $printCNT_DM_OBJ10v1header=0;
                while (@outputCNT_DM_OBJ10v1) {
                    $_ = shift(@outputCNT_DM_OBJ10v1);
                    if (/^<BDNA>(.*?)<BDNA>$/) {
                        $BDNA_Results{"CNT_DM_OBJ10v1"} = $1;
                        if (!$printCNT_DM_OBJ10v1header) {
                            $printCNT_DM_OBJ10v1header =1;
                            $CNT_DM_OBJ10v1 .= "Data_Mining_Objects\n";
                            $CNT_DM_OBJ10v1 .= "--------------------\n";
                        }
                        $CNT_DM_OBJ10v1 .= $1 . "\n";
                        if ($BDNA_Results{"CNT_DM_OBJ10v1"} > 0) {
                            $dmUsed =1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_DM_OBJ10v1 .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_DM_OBJ10v1 .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_DM_OBJ10v1 .= $1 . "\n";
                    }
                }
                $BDNA_Results{"lmsDMQuery"} .= $CNT_DM_OBJ10v1;
                $BDNA_Results{"lmsDMQuery"} .= "\n";

                &echo("Query Count of DM Model v10..");
                my $sqlCNT_DM_MDL10v1= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM DMSYS.DM\$MODEL";
                my @outputCNT_DM_MDL10v1 =&execSQL($host, $sqlCNT_DM_MDL10v1, "DMMDL10v1");
                my $CNT_DM_MDL10v1 = "SQL> SELECT COUNT(*) \"Data_Mining_Models\" FROM DMSYS.DM\$MODEL;\n";
                my $printCNT_DM_MDL10v1header=0;

                while (@outputCNT_DM_MDL10v1) {
                    $_ = shift(@outputCNT_DM_MDL10v1);
                    if (/^<BDNA>(.*?)<BDNA>$/) {
                        $BDNA_Results{"CNT_DM_MDL10v1"} = $1;
                        if (!$printCNT_DM_MDL10v1header) {
                            $printCNT_DM_MDL10v1header =1;
                            $CNT_DM_MDL10v1 .= "Data_Mining_Models\n";
                            $CNT_DM_MDL10v1 .= "------------------\n";
                        }
                        $CNT_DM_MDL10v1 .= $1 . "\n";
                        if ($BDNA_Results{"CNT_DM_MDL10v1"} > 0) {
                            $dmUsed =1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_DM_MDL10v1 .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_DM_MDL10v1 .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_DM_MDL10v1 .= $1 . "\n";
                    }
                }
                $BDNA_Results{"lmsDMQuery"} .= $CNT_DM_MDL10v1;
                $BDNA_Results{"lmsDMQuery"} .= "\n";
                $BDNA_Results{"dmUsed"} = $dmUsed;
                $BDNA_Results{"b_dmUsed"} = $dmUsed;
            };
        } elsif ($version =~ /^10\.2.*/) {
            eval {
                $resultString = '';

                &echo("Query Count of DM Object 10v2..");
                my $sqlCNT_DM_MDL10v2= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM DMSYS.DM\$P_MODEL";
                my @outputCNT_DM_MDL10v2 =&execSQL($host, $sqlCNT_DM_MDL10v2, "DMDML10v2");
                my $CNT_DM_MDL10v2 = "CHECKING TO EE IF DATA MINING OPTION IS USED..\n";
                $CNT_DM_MDL10v2 .= "SQL> SELECT COUNT(*) \"Data_Mining_Objects\" FROM DMSYS.DM\$P_MODEL;\n";
                my $printCNT_DM_MDL10v2Header =0;
                my $dmUsed =0;
                while (@outputCNT_DM_MDL10v2) {
                    $_ = shift(@outputCNT_DM_MDL10v2);
                    if (/^<BDNA>(.*?)<BDNA>$/) {                        
                        $BDNA_Results{"CNT_DM_MDL10v2"} = $1;
                        if (!$printCNT_DM_MDL10v2Header) {
                            $printCNT_DM_MDL10v2Header =1;
                            $CNT_DM_MDL10v2.= "Data_Mining_Objects\n";
                            $CNT_DM_MDL10v2 .= "------------------\n";
                        }
                        $CNT_DM_MDL10v2 .= $1 . "\n";
                        if ($BDNA_Results{"CNT_DM_MDL10v2"} > 0) {
                            $dmUsed =1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_DM_MDL10v2 .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_DM_MDL10v2 .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_DM_MDL10v2 .= $1 . "\n";
                    }
                }
                $BDNA_Results{"lmsDMQuery"} .= $CNT_DM_MDL10v2;
                $BDNA_Results{"lmsDMQuery"} .= "\n";
                $BDNA_Results{"dmUsed"} = $dmUsed;
                $BDNA_Results{"b_dmUsed"} = $dmUsed;
            };
        } elsif ($version =~ /^11\..*/) {
            eval {
                $resultString = '';
                &echo("Query Count of DM$P_MODEL 11g..");
                my $sqlCNT_DM_MDL11g= "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM SYS.MODEL\$";
                my @outputCNT_DM_MDL11g =&execSQL($host, $sqlCNT_DM_MDL11g, "DMDML11g");
                my $CNT_DM_MDL11g = "CHECKING TO SEE IF DATA MINING OPTION IS USED..\n";
                $CNT_DM_MDL11g .= "SQL> SELECT COUNT(*) \"Data_Mining_Objects\" FROM SYS.MODEL\$;\n";
                my $printCNT_DM_MDL11gHeader =0;
                my $dmUsed =0;
                while (@outputCNT_DM_MDL11g) {
                    $_ = shift(@outputCNT_DM_MDL11g);
                    if (/^<BDNA>(.*?)<BDNA>$/) {
                        $BDNA_Results{"CNT_DM_MDL11g"} = $1;
                        if (!$printCNT_DM_MDL11gHeader) {
                            $printCNT_DM_MDL11gHeader =1;
                            $CNT_DM_MDL11g.= "Data_Mining_Objects\n";
                            $CNT_DM_MDL11g .= "-------------------\n";
                        }
                        $CNT_DM_MDL11g .= $1 . "\n";
                        if ($BDNA_Results{"CNT_DM_MDL11g"} > 0) {
                            $dmUsed =1;
                        }
                        break;
                    } elsif (/^(no rows selected)$/) {
                        $CNT_DM_MDL11g .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $CNT_DM_MDL11g .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $CNT_DM_MDL11g .= $1 . "\n";
                    }
                }
                $BDNA_Results{"lmsDMQuery"} .= $CNT_DM_MDL11g;
                $BDNA_Results{"lmsDMQuery"} .= "\n";
                $BDNA_Results{"dmUsed"} = $dmUsed;
                $BDNA_Results{"b_dmUsed"} = $dmUsed;
            };
        } else {
            eval {
                $resultString = '';
                &echo("Querying from DBA_FEATURE_USAGE_STATISTICS FOR Data Mining Usage..");
                my $sqlDBAFeatureDM = "SELECT '<BDNA=>'||NAME||'<BDNA>'||DETECTED_USAGES" .
                                      "||'<BDNA>'||CURRENTLY_USED||'<BDNA>'||FIRST_USAGE_DATE" .
                                      "||'<BDNA>'||LAST_USAGE_DATE||'<=BDNA>'".
                                      " FROM DBA_FEATURE_USAGE_STATISTICS".
                                      " WHERE NAME='Data Mining'";
                my $DBA_FEATURE_USAGE = "CHECKING TO SEE IF DATA MINING OPTION IS USED..\n";
                $DBA_FEATURE_USAGE .= "SQL> SELECT NAME, DETECTED_USAGES, CURRENTLY_USED, FIRST_USAGE_DATE, LAST_USAGE_DATE ".
                                      "FROM DBA_FEATURE_USAGE_STATISTICS WHERE NAME='Data Mining';\n";
                my $dmUsed =0;
                my $printDBAFeatureDMHeader =0;
                my @outputDBAFeatureDM = &execSQL($host, $sqlDBAFeatureDM, "dba_features_dm");
                my $outputCombined = join('', @outputDBAFeatureDM);
                $outputCombined =~ s/[\r|\n]//g;
                $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
                @outputDBAFeatureDM = split("\n",$outputCombined);
                while (@outputDBAFeatureDM) {
                    $_ = shift(@outputDBAFeatureDM);
                    if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {                    
                        my ($name, $detUsage, $curUsed, $firstUsed, $lastUsed) = ($1, $2, $3, $4, $5);
                        if (!$printDBAFeatureDMHeader) {
                            $printDBAFeatureDMHeader =1;
                            $DBA_FEATURE_USAGE .= "NAME". " ". "DETECTED_USAGES". " " . "CURRENTLY_USED". " " .
                                                  "FIRST_USAGE_DATE". " " ."LAST_USAGE_DATE". "\n";
                            $DBA_FEATURE_USAGE .= "-----------------  ". "---------------  ". "--------------  " .
                                                  "-----------------  ". "-----------------\n";
                        }
                        $DBA_FEATURE_USAGE .= $name . " ";
                        $DBA_FEATURE_USAGE .= $detUsage . " ";
                        $DBA_FEATURE_USAGE .= $curUsed . " ";
                        $DBA_FEATURE_USAGE .= $firstUsed . " ";
                        $DBA_FEATURE_USAGE .= $lastUsed. "\n";
                        if ($curUsed eq 'TRUE') {
                            $dmUsed =1;
                        }
                    } elsif (/^(no rows selected)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $DBA_FEATURE_USAGE .= $1 . "\n";
                    }
                }
                $BDNA_Results{"lmsDMQuery"} .= $DBA_FEATURE_USAGE;
                $BDNA_Results{"lmsDMQuery"} .= "\n";
                $BDNA_Results{"dmUsed"} = $dmUsed;
                $BDNA_Results{"b_dmUsed"} = $dmUsed;
            };
        }

        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>


    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions3StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});

        eval {
            &echo("Test if Label security is installed.");
            my $sqlLblSecInstalled = "SELECT 'ORACLE LABEL SECURITY INSTALLED: '||'<BDNA>'||VALUE||'<BDNA>'".
                                     " FROM V\$OPTION WHERE PARAMETER ='Oracle Label Security'";
            my @outputLblSecInstalled = &execSQL($host, $sqlLblSecInstalled, "lblSecurity");

            my $LblSecInstalledQuery = "CHECKING TO SEE IF LABEL SECURITY OPTION IS INSTALLED..\n";
            $LblSecInstalledQuery .=   "SQL> SELECT 'ORACLE LABEL SECURITY INSTALLED: '||VALUE".
                                       " \"LABEL SECURITY\" FROM V\$OPTION WHERE ". 
                                       "PARAMETER ='Oracle Label Security';\n";

            my $lblSecEnabled = 0;
            my $printlblSecInstalledHeader =0;
            while (@outputLblSecInstalled) {
                $_ = shift(@outputLblSecInstalled);
                if (/^ORACLE LABEL SECURITY INSTALLED: <BDNA>(.*?)<BDNA>$/) {
                    my $lblSecInstalled = $1;
                    if ($lblSecInstalled eq 'TRUE') {
                        $lblSecEnabled= 1;
                    }
                    if (!$printlblSecInstalledHeader) {
                        $printlblSecInstalledHeader =1;
                        $LblSecInstalledQuery .= "LABEL SECURITY\n";
                        $LblSecInstalledQuery .= "---------------\n";
                    }
                    $LblSecInstalledQuery .= "ORACLE LABEL SECURITY INSTALLED: $lblSecInstalled\n";
                    break;
                } elsif (/^(no rows selected)$/) {
                    $LblSecInstalledQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $LblSecInstalledQuery .= $1 . "\n";
                }  elsif (/^(\d+ rows selected.)$/) {
                    $LblSecInstalledQuery .= $1 . "\n";
                }
            }
            $BDNA_Results{"lbl_security_installed"} = $lblSecEnabled;
            $BDNA_Results{"b_lbl_security_installed"} = $lblSecEnabled;
            $BDNA_Results{"lbl_security_query"} .= $LblSecInstalledQuery;
            $BDNA_Results{"lbl_security_query"} .= "\n";
        };

        eval {
            &echo("Count rows of label security policy.");
            my $sql_lbl_security_pol_count = "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM LBACSYS.LBAC\$POLT ".
                                             "WHERE OWNER <> 'SA_DEMO'";
            my @output_lbl_security_pol_count = execSQL($host, $sql_lbl_security_pol_count, "lblPolCnt");
            my $lbl_security_pol_query  = "CHECKING TO SEE IF LABEL SECURITY OPTION IS BEING USED..\n";
            $lbl_security_pol_query .= "SQL> SELECT COUNT(*) \"Count\" FROM LBACSYS.LBAC\$POLT WHERE OWNER <> 'SA_DEMO';\n";
            my $lbl_security_used = 0;
            my $printlbl_security_pol_countHeader =0;
            while (@output_lbl_security_pol_count) {
                $_ = shift(@output_lbl_security_pol_count);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    $BDNA_Results{"lbl_security_pol_count"} = $1;
                    if (!$printlbl_security_pol_countHeader) {
                        $printlbl_security_pol_countHeader =1;
                        $lbl_security_pol_query .= "Count\n";
                        $lbl_security_pol_query .= "------\n";
                    }
                    $lbl_security_pol_query .= $1 . "\n";

                    if ($BDNA_Results{"lbl_security_pol_count"}> 0) {
                        $lbl_security_used = 1;
                    }
                    break;
                } elsif (/^(no rows selected)$/) {
                    $lbl_security_pol_query .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $lbl_security_pol_query .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $lbl_security_pol_query .= $1 . "\n";
                }
            }
            $BDNA_Results{"lbl_security_query"} .= $lbl_security_pol_query;
            $BDNA_Results{"lbl_security_query"} .= "\n";
            $BDNA_Results{"lbl_security_used"} = $lbl_security_used;
            $BDNA_Results{"b_lbl_security_used"} = $lbl_security_used;
        };

        if (!($version =~ /^8\..*/)) {
        eval {
            my $auditVaultInstalled = 0;
            my $auditVaultUsed = 0;

            &echo("Test if audit vault schema be found.");
            my $sqlAuditVaultSchema = "SELECT '<BDNA>'||USERNAME||'<BDNA>' FROM DBA_USERS WHERE UPPER(USERNAME)='AVSYS'";
            my @outputAuditVaultSchema = execSQL($host, $sqlAuditVaultSchema, "auditVaultSchema");
            my $auditVaultQuery = "CHECKING TO SEE IF AUDIT VAULT SCHEMAS ARE INSTALLED/USED..\n";
            $auditVaultQuery .= "SQL> SELECT USERNAME FROM DBA_USERS WHERE UPPER(USERNAME)='AVSYS';\n";

            my $printAuditVaultSchemaHeader =0;
            while (@outputAuditVaultSchema) {
                $_ = shift(@outputAuditVaultSchema);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    if (!$printAuditVaultSchemaHeader) {
                        $printAuditVaultSchemaHeader =1;
                        $auditVaultQuery .= "USERNAME\n";
                        $auditVaultQuery .= "----------\n";
                    }
                    $auditVaultQuery .= $1 . "\n";
                    $auditVaultInstalled = 1;
                    $auditVaultUsed = 1;
                    break;
                } elsif (/^(no rows selected)$/) {
                    $auditVaultQuery .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $auditVaultQuery .= $1  . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $auditVaultQuery .= $1 . "\n";
                }
            }
            $BDNA_Results{"auditVaultQuery"} = $auditVaultQuery;
            $BDNA_Results{"auditVaultInstalled"} = $auditVaultInstalled;
            $BDNA_Results{"b_auditVaultInstalled"} = $auditVaultInstalled;
            $BDNA_Results{"auditVaultUsed"} = $auditVaultUsed;
            $BDNA_Results{"b_auditVaultUsed"} = $auditVaultUsed;
        };


        eval {
            my $dbVaultInstalled = 0;
            my $dbVaultUsed = 0;
            &echo("Test if Database Vault DVSYS schema be found.");
            my $sqlDVSYSInstalled = "SELECT '<BDNA>'||DECODE(UPPER(MAX(USERNAME)), 'DVSYS', 'Database Vault Schema DVSYS exist',".
                                    " 'Database Vault schema DVSYS does not exist')||'<BDNA>' FROM DBA_USERS WHERE UPPER(USERNAME)='DVSYS'";
            my @outputDVSYSInstalled = execSQL($host, $sqlDVSYSInstalled, "DVSYS");
            my $DVSYS_query  = "SQL> SELECT DECODE(UPPER(MAX(USERNAME)), 'DVSYS', 'Database Vault Schema DVSYS exist', ".
                               "'Database Vault schema DVSYS does not exist') \"DVSYS\" FROM DBA_USERS WHERE UPPER(USERNAME)='DVSYS';\n";
            my $DVSYS_enabled = 0;
            my $printDVSYSheader =0;
            while (@outputDVSYSInstalled) {
                $_ = shift(@outputDVSYSInstalled);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    $BDNA_Results{"dvSys"} = $1;
                    if (!$printDVSYSheader) {
                        $printDVSYSheader =1;
                        $DVSYS_query .= "DVSYS\n";
                        $DVSYS_query .= "--------\n";
                    }
                    $DVSYS_query .= $1 . "\n";

                    if ($BDNA_Results{"dvSys"} eq 'Database Vault Schema DVSYS exist') {
                        $DVSYS_enabled =1;
                        $dbVaultInstalled = 1;
                    }
                    break;
                } elsif (/^(no rows selected)$/) {
                    $DVSYS_query .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $DVSYS_query .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $DVSYS_query .= $1 . "\n";
                }
            }
            $BDNA_Results{"dbVaultQuery"} .= $DVSYS_query;
            $BDNA_Results{"dbVaultQuery"} .= "\n";

            &echo("Test if Database Vault DVF schema be found.");
            my $sqlDVFInstalled = "SELECT '<BDNA>'||DECODE(UPPER(MAX(USERNAME)), 'DVF', 'Database Vault Schema DVF exist',".
                                    " 'Database Vault schema DVF does not exist')||'<BDNA>' FROM DBA_USERS WHERE UPPER(USERNAME)='DVF'";
            my @outputDVFInstalled = execSQL($host, $sqlDVFInstalled, "DVF");
            my $DVF_query  = "CHECKING IF DATABASE VAULT REALMS CREATED..\n";
            $DVF_query .= "SQL> SELECT DECODE(UPPER(MAX(USERNAME)), 'DVF', 'Database Vault Schema DVF exist', ".
                               "'Database Vault schema DVF does not exist') \"DVF\" FROM DBA_USERS WHERE UPPER(USERNAME)='DVF';\n";
            my $DVF_enabled = 0;
            my $printDVFInstalledHeader =0;
            while (@outputDVFInstalled) {
                $_ = shift(@outputDVFInstalled);
                if (/^<BDNA>(.*?)<BDNA>$/) {
                    $BDNA_Results{"dvf"} = $1;
                    if (!$printDVFInstalledHeader) {
                        $printDVFInstalledHeader =1;
                        $DVF_query .= "DVF\n";
                        $DVF_query .= "-------\n";
                    }
                    $DVF_query .= $1 . "\n";

                    if ($BDNA_Results{"dvf"} eq 'Database Vault Schema DVF exist') {
                        $DVF_enabled =1;
                        $dbVaultInstalled =1;
                    }
                    break;
                } elsif (/^(no rows selected)$/) {
                    $DVF_query .= $1 . "\n";
                    break;
                } elsif (/^(ORA-\d+: .*)$/) {
                    $DVF_query .= $1 . "\n";
                } elsif (/^(\d+ rows selected.)$/) {
                    $DVF_query .= $1 . "\n";
                }
            }
            $BDNA_Results{"dbVaultQuery"} .= $DVF_query;
            $BDNA_Results{"dbVaultQuery"} .= "\n";

            my $DV_Realm_query = "";
            if ($DVF_enabled && $DVSYS_enabled) {
                eval {
                    &echo("Test if Database Vault Realm is created.");
                    my $sql_DV_Realm_Created = "SELECT '<BDNA>'||DECODE(COUNT(*), 0, 'No realms were created', count(*)||".
                                               "' Realms were created')||'<BDNA>' FROM DVSYS.DBA_DV_REALM";
                    my @output_DV_Realm_Created = execSQL($host, $sql_DV_Realm_Created, "DV_Realm_Created");
                    $DV_Realm_query  = "SQL>SELECT DECODE(COUNT(*), 0, 'No realms were created', count(*)||' Realms were created') ".
                                       "\"DBA_DV_REALM\" FROM DVSYS.DBA_DV_REALM;\n";
                    my $DV_Realm_Created = 0;
                    my $printDV_RealmHeader = 0;
                    while (@output_DV_Realm_Created) {
                        $_ = shift(@output_DV_Realm_Created);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            $BDNA_Results{"dvRealm"} = $1;
                            if (!$printDV_RealmHeader) {
                                $printDV_RealmHeader =1;
                                $DV_Realm_query  .= "DBA_DV_REALM\n";
                                $DV_Realm_query .= "-------------------------------------\n";
                            }
                            $DV_Realm_query  .= $1 . "\n";

                            if ($BDNA_Results{"dvRealm"} =~ /\d+ Realms were created/) {
                                $dbVaultUsed = 1;
                            }
                        } elsif (/^(no rows selected)$/) {
                            $DV_Realm_query .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $DV_Realm_query .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $DV_Realm_query .= $1 . "\n";
                        }
                        break;
                    }
                };
            }
            $BDNA_Results{"dbVaultQuery"} .= $DV_Realm_query;
            $BDNA_Results{"dbVaultQuery"} .= "\n";
            $BDNA_Results{"dbVaultInstalled"} = $dbVaultInstalled;
            $BDNA_Results{"b_dbVaultInstalled"} = $dbVaultInstalled;
            $BDNA_Results{"dbVaultUsed"} = $dbVaultUsed;
            $BDNA_Results{"b_dbVaultUsed"} = $dbVaultUsed;
        };
        }

        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions4StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});

        if (!($version =~ /^8\..*/)) {
        eval {
            my $contentDBInstalled = 0;
            my $recordDBInstalled = 0;
            &echo("Test if content database is installed.");
            my $sqlContentDBInstalled = "SELECT '<BDNA>'||DECODE(UPPER(MAX(USERNAME)), 'CONTENT', 'CONTENT schema exist',".
                                        " 'CONTENT schema does not exist')||'<BDNA>' FROM DBA_USERS WHERE UPPER(USERNAME)='CONTENT'";
            my @outputContentDBInstalled = execSQL($host, $sqlContentDBInstalled, "CDBInstalled");
            my $contentDBQuery = "SQL> SELECT DECODE(UPPER(MAX(USERNAME)), 'CONTENT', 'CONTENT schema exist',".
                                        " 'CONTENT schema does not exist') \"CONTENT DB and RECORD DB\" FROM DBA_USERS WHERE UPPER(USERNAME)='CONTENT';\n";
            if (scalar(@outputContentDBInstalled) > 0 ) {
                my $printContentDBInstalledHeader =0;
                while (@outputContentDBInstalled) {
                    $_ = shift(@outputContentDBInstalled);
                    if (/^<BDNA>(.*?)<BDNA>$/) {
                        my $uName = $1;
                        if (!$printContentDBInstalledHeader) {
                            $printContentDBInstalledHeader =1;
                            $contentDBQuery .= "CONTENT DB and RECORD DB\n";
                            $contentDBQuery .= "-------------------------\n";
                        }
                        $contentDBQuery .= $1 . "\n";

                        if ($uName eq 'CONTENT schema exist') {
                            $contentDBInstalled =1;
                            $recordDBInstalled =1;
                        }
                        break;
                   
                    } elsif (/^(no rows selected)$/) {
                        $contentDBQuery .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $contentDBQuery .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $contentDBQuery .= $1 . "\n";
                    }
                }
            }
            $BDNA_Results{"contentDBInstalled"} = $contentDBInstalled;
            $BDNA_Results{"b_contentDBInstalled"} = $contentDBInstalled;
            $BDNA_Results{"recordDBInstalled"} = $recordDBInstalled;
            $BDNA_Results{"b_recordDBInstalled"} = $recordDBInstalled;
            $BDNA_Results{"contentDBQuery"} .= $contentDBQuery;
            $BDNA_Results{"contentDBQuery"} .= "\n";
            $BDNA_Results{"recordDBQuery"} = $BDNA_Results{"contentDBQuery"};
    
            my $contentDBUsed = 0; 
            eval {
                &echo("Test if content database is used.");
                my $sqlOdmDocCustObjCnt = "SELECT '<BDNA>'||(COUNT(*)-9004)||'<BDNA>' FROM ODM_DOCUMENT";
                my @outputOdmDocCustObjCnt = execSQL($host, $sqlOdmDocCustObjCnt, "ODM_CNT");
                $BDNA_Results{"contentDBQuery"} .= "CHECKING TO SEE IF CONTENT DATABASE IS BEING USED:\n";
                $BDNA_Results{"contentDBQuery"} .= "SQL> SELECT (COUNT(*)-9004) \"ODM_Document Customer Objects\" FROM ODM_DOCUMENT;\n";

                if (scalar(@outputOdmDocCustObjCnt) > 0 ) {
                    my $printOdmDocCustObjCntHeader =0;
                    while (@outputOdmDocCustObjCnt) {
                        $_ = shift(@outputOdmDocCustObjCnt);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            my $count  = $1;
                            $BDNA_Results{"odmDocCustObjCnt"} = $1;
                            if (!$printOdmDocCustObjCntHeader) {
                                $printOdmDocCustObjCntHeader =1;
                                $BDNA_Results{"contentDBQuery"} .= "ODM_Document Customer Objects\n";
                                $BDNA_Results{"contentDBQuery"} .= "-------------------------------------\n";
                            }
                            $BDNA_Results{"contentDBQuery"} .= $1 . "\n";

                            if ($count > 1) {
                                $contentDBUsed =1;
                            }
                            break;
                        } elsif (/^(no rows selected)$/) {
                            $BDNA_Results{"contentDBQuery"} .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $BDNA_Results{"contentDBQuery"} .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $BDNA_Results{"contentDBQuery"} .= $1 . "\n";
                        }
                    }
                }
            };
            $BDNA_Results{"contentDBUsed"} = $contentDBUsed;
            $BDNA_Results{"b_contentDBUsed"} = $contentDBUsed;

            my $recordDBUsed = 0;
            eval {
                &echo("Test if record database is used.");
                my $recordDBUsed = 0;
                my $sqlRecordODM_Rec_Cnt = "SELECT '<BDNA>'||COUNT(*)||'<BDNA>' FROM ODM_RECORD";
                my @outputRecordODM_Rec_Cnt = execSQL($host, $sqlRecordODM_Rec_Cnt, "ODM_REC_CNT");
                $BDNA_Results{"recordDBQuery"} .= "CHECKING TO SEE IF RECORDS DATABASE IS BEING USED: \n";
                $BDNA_Results{"recordDBQuery"} .= "SQL> SELECT COUNT(*) \"ODM_RECORD Customer Objects\" FROM ODM_RECORD;\n";

                if (scalar(@outputRecordODM_Rec_Cnt) > 0 ) {
                    my $printODM_Rec_Cnt =0;
                    while (@outputRecordODM_Rec_Cnt) {
                        $_ = shift(@outputRecordODM_Rec_Cnt);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            my $count  = $1;
                            $BDNA_Results{"recordODM_Rec_Cnt"} = $1;
                            if (!$printODM_Rec_Cnt) {
                                $printODM_Rec_Cnt =1;
                                $BDNA_Results{"recordDBQuery"} .= "ODM_RECORD Customer Objects\n";
                                $BDNA_Results{"recordDBQuery"} .= "-------------------------------\n";
                            }
                            $BDNA_Results{"recordDBQuery"} .= $1 . "\n";

                            if ($count > 1) {
                                $recordDBUsed =1;
                            }
                            break;
                        } elsif (/^(no rows selected)$/) {
                            $BDNA_Results{"recordDBQuery"} .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $BDNA_Results{"recordDBQuery"} .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $BDNA_Results{"recordDBQuery"} .= $1 . "\n";
                            break;
                        }
                    }
                }
            };
            $BDNA_Results{"recordDBUsed"} = $recordDBUsed;
            $BDNA_Results{"b_recordDBUsed"} = $recordDBUsed;
        };
        }

        eval {
            &echo("Test if advanced security is used.");
            my $advSecInstalled = 0;
            my $advSecUsed =0;
            my $sqlAdvSec = "SELECT '<BDNA=>'||AUTHENTICATION_TYPE||','||SID||','||OSUSER||','||NETWORK_SERVICE_BANNER||'<=BDNA>' ".
                            "FROM V\$SESSION_CONNECT_INFO ".
                            "WHERE LOWER(NETWORK_SERVICE_BANNER) LIKE '%authentication service%' OR ".
                            "LOWER(NETWORK_SERVICE_BANNER) LIKE '%encryption service%' OR ".
                            "LOWER(NETWORK_SERVICE_BANNER) LIKE '%crypto_checksumming%' ORDER BY 1";
            my $advSecQuery = "CHECKING IF ADVANCED SECURITY OPTION FUNCTIONALITIES ARE IN USE..\n";
            $advSecQuery .= "LOOKING FOR SESSIONS USING NETWORK ENCRYPTION AND STRONG AUTHENTICATION\n";
            $advSecQuery .= "SQL> SELECT AUTHENTICATION_TYPE||','||SID||','||OSUSER||','||NETWORK_SERVICE_BANNER ".
                            "\"Network Encryption and S. Auth\" FROM V\$SESSION_CONNECT_INFO ".
                            "WHERE LOWER(NETWORK_SERVICE_BANNER) LIKE '%authentication service%' OR ".
                            "LOWER(NETWORK_SERVICE_BANNER) LIKE '%encryption service%' OR ".
                            "LOWER(NETWORK_SERVICE_BANNER) LIKE '%crypto_checksumming%' ORDER BY 1;\n";
            my @outputAdvSec = execSQL($host, $sqlAdvSec, "AdvSec");
            my $outputCombined = join('', @outputAdvSec);
            $outputCombined =~ s/[\r|\n]//g;
            $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
            @outputAdvSec = split("\n",$outputCombined);
            if (scalar(@outputAdvSec) > 0 ) {
                my $printAdvSecHeader = 0;
                while (@outputAdvSec) {
                    $_ = shift(@outputAdvSec);
                    if (/^<BDNA=>(.*?)<=BDNA>/) {
                        my $banner = $1;
                        if (!$printAdvSecHeader) {
                            $printAdvSecHeader = 1;
                            $advSecQuery .= "Network Encryption and S. Auth\n";
                            $advSecQuery .= "-------------------------------------\n";
                        }
                        $advSecQuery .= $banner . "\n";
                   
                        if ($banner =~ /(AES256|AES192|AES128|3DES168|3DES112|DES56C|DES40C|RC4_256|RC4_128|RC4_56|RC4_40|MD5|SHA1|RADIUS|Kerberos|SSL)/) {
                            $advSecUsed =1;
                            $advSecInstalled =1;
                        }                    
                    } elsif (/^(no rows selected)$/) {
                        $advSecQuery .= $1 . "\n";
                        break;
                    } elsif (/^(ORA-\d+: .*)$/) {
                        $advSecQuery .= $1 . "\n";
                    } elsif (/^(\d+ rows selected.)$/) {
                        $advSecQuery .= $1 . "\n";
                        break;
                    }
                }
            }
          
            eval {
                my $sqlAdvSecTDE = "SELECT OWNER||','||TABLE_NAME||','||COLUMN_NAME FROM DBA_ENCRYPTED_COLUMNS ORDER BY 1";
                my @outputAdvSecTDE = execSQL($host, $sqlAdvSecTDE, "AdvSecTDE");
                $advSecQuery .= "LOOKING FOR TABLESPACES USING TDE (TRANSPARENT DATA ENCRYPTION)- 11G AND ABOVE\n";
                $advSecQuery .= "SQL> SELECT OWNER||','||TABLE_NAME||','||COLUMN_NAME \"Column Encryption\" FROM DBA_ENCRYPTED_COLUMNS ORDER BY 1;\n";
                
                if (scalar(@outputAdvSecTDE) > 0 ) {
                    my $printAdvSecTDEHeader =0;
                    while (@outputAdvSecTDE) {
                        $_ = shift(@outputAdvSecTDE);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            if (!$printAdvSecTDEHeader) {
                                $printAdvSecTDEHeader = 1;
                                $advSecQuery .= "Column Encryption\n";
                                $advSecQuery .= "------------------\n";
                            }
                            $advSecQuery .= $1 . "\n";
                            $advSecUsed =1;
                            $advSecInstalled =1;
                        } elsif (/^(no rows selected)$/) {
                            $advSecQuery .= $1;
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $advSecQuery .= $1;
                        } elsif (/^(\d+ rows selected.)$/) {
                            $advSecQuery .= $1 . "\n";
                            break;
                        }
                    }
                }
            };

            eval {
                my $sqlAdvSecTbl = "SELECT TABLESPACE_NAME||','||ENCRYPTED FROM DBA_TABLESPACES WHERE ENCRYPTED='YES'";
                my @outputAdvSecTbl = execSQL($host, $sqlAdvSecTbl, "AdvSecTbl");
                $advSecQuery .= "CHECKING IF ADVANCED SECURITY OPTION FUNCTIONALITIES ARE IN USE ...\n";
                $advSecQuery .= "LOOKING FOR SESSIONS USING NETWORK ENCRYPTION AND STRONG AUTHENTICATION\n";
                $advSecQuery .= "SQL> SELECT TABLESPACE_NAME||','||ENCRYPTED \"Tablespace Encryption\" FROM DBA_TABLESPACES WHERE ENCRYPTED='YES';\n";

                my $printAdvSecTblHeader = 0;
                if (scalar(@outputAdvSecTbl) > 0 ) {
                    while (@outputAdvSecTbl) {
                        $_ = shift(@outputAdvSecTbl);                         
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            if (!$printAdvSecTblHeader) {
                                $printAdvSecTblHeader = 1;
                                $advSecQuery .= "Tablespace Encryption\n";
                                $advSecQuery .= "------------------------\n";
                            }
                            $advSecQuery .= $1;
                            $advSecUsed =1;
                            $advSecInstalled =1;
                        } elsif (/^(no rows selected)$/) {
                            $advSecQuery .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $advSecQuery .= $1;
                        } elsif (/^(\d+ rows selected.)$/) {
                            $advSecQuery .= $1 . "\n";
                            break;
                        }
                    }
                } 
            };

            $BDNA_Results{"advSecQuery"} = $advSecQuery;
            $BDNA_Results{"advSecUsed"} = $advSecUsed;
            $BDNA_Results{"b_advSecUsed"} = $advSecUsed;
            $BDNA_Results{"advSecInstalled"} = $advSecInstalled;
            $BDNA_Results{"b_advSecInstalled"} = $advSecInstalled;
        };

        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions5StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});

        my ($tuningPackInstalled, $tuningPackUsed, $tuningPackQuery) = (0, 0, '');
        my ($DiagPkInstalled, $DiagPkUsed, $DiagPkQuery) = (0, 0, '');
        my ($ChgPkInstalled, $ChgPkUsed, $ChgPkQuery) = (0, 0, '');
        my ($ConfigPkInstalled, $ConfigPkUsed, $ConfigPkQuery) = (0, 0, '');

        my $majorVersion = -1;
        if ($version =~ /^(\d+)\..*/) {
            $majorVersion = $1;
        }
        my $oemInstalled =0;
        my $oemUsed =0;
        my $OEMQuery = '';
      
        if ($majorVersion < 10) {
            &echo("Checking for OEM Version prior to 10g");

            eval {
                &echo("Checking for OEM Program is running during measurement period.");                
                my $sqlOEMRunning = "SELECT DISTINCT '<BDNA>'||PROGRAM||'<BDNA>'".
                                    " FROM V\$SESSION".
                                    " WHERE UPPER(PROGRAM) LIKE '%XPNI.EXE%'".
                                    " OR UPPER(PROGRAM) LIKE '%VMS.EXE%'".
                                    " OR UPPER(PROGRAM) LIKE '%EPC.EXE%'".
                                    " OR UPPER(PROGRAM) LIKE '%TDVAPP.EXE%'".
                                    " OR UPPER(PROGRAM) LIKE '%VDOSSHELL%'".
                                    " OR UPPER(PROGRAM) LIKE '%VMQ%'".
                                    " OR UPPER(PROGRAM) LIKE '%VTUSHELL%'".
                                    " OR UPPER(PROGRAM) LIKE '%JAVAVMQ%'".
                                    " OR UPPER(PROGRAM) LIKE '%XPAUTUNE%'".
                                    " OR UPPER(PROGRAM) LIKE '%XPCOIN%'".
                                    " OR UPPER(PROGRAM) LIKE '%XPKSH%'".
                                    " OR UPPER(PROGRAM) LIKE '%XPUI%'";
                my @outputOEMRunning = execSQL($host, $sqlOEMRunning, "OEMRunning");
                $OEMQuery .= "SQL> SELECT DISTINCT PROGRAM \n".
                             " \"PROGRAM\" FROM V\$SESSION\n".
                             " WHERE UPPER(PROGRAM) LIKE '%XPNI.EXE%'\n".
                             " OR UPPER(PROGRAM) LIKE '%VMS.EXE%'\n".
                             " OR UPPER(PROGRAM) LIKE '%EPC.EXE%'\n".
                             " OR UPPER(PROGRAM) LIKE '%TDVAPP.EXE%'\n".
                             " OR UPPER(PROGRAM) LIKE '%VDOSSHELL%'\n".
                             " OR UPPER(PROGRAM) LIKE '%VMQ%'\n".
                             " OR UPPER(PROGRAM) LIKE '%VTUSHELL%'\n".
                             " OR UPPER(PROGRAM) LIKE '%JAVAVMQ%'\n".
                             " OR UPPER(PROGRAM) LIKE '%XPAUTUNE%'\n".
                             " OR UPPER(PROGRAM) LIKE '%XPCOIN%'\n".
                             " OR UPPER(PROGRAM) LIKE '%XPKSH%'\n".
                             " OR UPPER(PROGRAM) LIKE '%XPUI%';\n";

                if (scalar(@outputOEMRunning) > 0) {
                    my $printOEMRunningHeader = 0;
                    while (@outputOEMRunning) {
                        $_ = shift(@outputOEMRunning);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            if (!$printOEMRunningHeader) {
                                $printOEMRunningHeader =1;
                                $OEMQuery .= "PROGRAM\n";
                                $OEMQuery .= "---------\n";
                            }
                            $OEMQuery .= $1 . "\n";
                            $oemInstalled =1;
                            $oemUsed =1;
                        } elsif (/^(no rows selected)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $OEMQuery .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        }
                    }
                }
            };

            eval {
                &echo("Checking OEM Repositories.");
                my $sqlOEMRep = qq#
SET SERVEROUTPUT ON 
DECLARE 
      cursor1 integer;
      v_count number(1);
      v_schema dba_tables.owner%TYPE;
      v_version varchar2(10);
      v_component varchar2(20);
      v_i_name varchar2(10);
      v_h_name varchar2(30);
      stmt varchar2(200);
      rows_processed integer;

      CURSOR schema_array IS
      SELECT owner 
      FROM dba_tables WHERE table_name = 'SMP_REP_VERSION';

      CURSOR schema_array_v2 IS
      SELECT owner 
      FROM dba_tables WHERE table_name = 'SMP_VDS_REPOS_VERSION';

      BEGIN
        DBMS_OUTPUT.PUT_LINE ('.');
        DBMS_OUTPUT.PUT_LINE ('OEM REPOSITORY LOCATIONS');

        select instance_name,host_name into v_i_name, v_h_name from v$instance;
        DBMS_OUTPUT.PUT_LINE ('Instance: '||v_i_name||' on host: '||v_h_name);

        OPEN schema_array;
        OPEN schema_array_v2;

        cursor1:=dbms_sql.open_cursor;

        v_count := 0;
    LOOP -- this loop steps through each valid schema.
        FETCH schema_array INTO v_schema;
        EXIT WHEN schema_array%notfound;
        v_count := v_count + 1;
        dbms_sql.parse(cursor1,'select c_current_version, c_component from
           '||v_schema||'.smp_rep_version', dbms_sql.native);
        dbms_sql.define_column(cursor1, 1, v_version, 10);
        dbms_sql.define_column(cursor1, 2, v_component, 20);

        rows_processed:=dbms_sql.execute ( cursor1 );

        loop -- to step through cursor1 to find console version.
            if dbms_sql.fetch_rows(cursor1) >0 then
                dbms_sql.column_value (cursor1, 1, v_version);
                dbms_sql.column_value (cursor1, 2, v_component);
                if v_component = 'CONSOLE' then
                    dbms_output.put_line ('Schema '||rpad(v_schema,15)||' has a repository
                    version '||v_version);
                    exit;
                end if;
            else
                exit;
            end if;
        end loop;
    END LOOP;

    LOOP -- this loop steps through each valid V2 schema.
        FETCH schema_array_v2 INTO v_schema;
        EXIT WHEN schema_array_v2%notfound;

        v_count := v_count + 1;
        dbms_output.put_line ( 'Schema '||rpad(v_schema,15)||' has a repository version 2.x' );
    end loop;

    dbms_sql.close_cursor (cursor1);
    close schema_array;
    close schema_array_v2;
    if v_count = 0 then
        dbms_output.put_line ( 'There are NO OEM repositories on this instance.');
    end if;
end;
                #;
                my @outputOEMRep = execSQL($host, $sqlOEMRep, "OEMRep");
                $OEMQuery .= ("SQL> " . $sqlOEMRep . ";\n");
                
                if (scalar(@outputOEMRep) > 0) {
                    $OEMQuery .= "OEM REPOSITORY LOCATIONS\n";
                    my $printData = 0;    
                    while (@outputOEMRep) {
                        my $line = shift(@outputOEMRep);
                        if ($line =~ /^(Instance:.*)$/) {
                            $printData =1;
                        } elsif ($line =~ /^PL\/SQL procedure successfully completed$/) {
                            $printData = 0;
                            break;
                        } elsif ($line =~ /^(There are NO OEM repositories on this instance)$/) {
                            $printData = 0;
                            $OEMQuery .= $1 . "\n";
                            break;
                        } elsif ($line =~ /^(ORA-\d+: .*)$/) {
                            $OEMQuery .= $1;
                        } elsif (/^(\d+ rows selected.)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        } elsif (/^(\d+ rows selected.)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        }

                        if ($printData) {
                            $OEMQuery .= $line . "\n";
                            if (!($line =~ /^(Instance:.*)$/)) {
                                $oemInstalled =1;
                                $oemUsed =1;                                
                            }   
                        }                        
                    }
                }
            };                           
        } elsif ($majorVersion >= 10) {
            &echo("Checking for OEM Version 10g or higher");
            eval {
                &echo("Checking for OEM Schema Owner.");
                my $sqlOEMSchemaOwner = "SELECT '<BDNA>'||OWNER||'<BDNA>' FROM DBA_TABLES  WHERE TABLE_NAME = 'MGMT_ADMIN_LICENSES'";
                my @outputOEMSchemaOwner = execSQL($host, $sqlOEMSchemaOwner, "OEMSchemaOwner");
                $OEMQuery .= "SQL> SELECT 'OEM REPOSITORY SCHEMA:' C_, OWNER AS OEMOWNER FROM DBA_TABLES WHERE TABLE_NAME = 'MGMT_ADMIN_LICENSES';\n";

                my $OEMSchemaOwner = '';
                my $printOEMSchemaHeader = 0;
print "Output: @outputOEMSchemaOwner\n";
                if (scalar(@outputOEMSchemaOwner) > 0) {
                    while (@outputOEMSchemaOwner) {
                        $_ = shift(@outputOEMSchemaOwner);
                        if (/^<BDNA>(.*?)<BDNA>$/) {
                            if (!$printOEMSchemaHeader) {
                                $printOEMSchemaHeader = 1;
                                $OEMQuery .= "C_    OEMOWNER  \n";
                                $OEMQuery .= "----- -----------\n";
                            }
                            $OEMSchemaOwner = $1;
                            $OEMQuery .= "OEM REPOSITORY SCHEMA: $OEMSchemaOwner \n";
                        } elsif (/^(no rows selected)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $OEMQuery .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        }
                    }
                }
                $OEMQuery .= "\n";
                if ($OEMSchemaOwner) {
                    &echo("Checking for management pack being used.");
                    my $sqlOEMPack = "select '<BDNA>'||a.pack_display_label||'<BDNA>'||decode(b.pack_name, null, 'NO', 'YES')".
                                     "||'<BDNA>'||PACK_ACCESS_AGREED||'<BDNA>' from ".
                                     $OEMSchemaOwner .".MGMT_LICENSE_DEFINITIONS a,".
                                     $OEMSchemaOwner .".MGMT_ADMIN_LICENSES      b,".
                                     "      (select decode(count(*), 0, 'NO', 'YES') as PACK_ACCESS_AGREED ".
                                     "        from ".$OEMSchemaOwner.".MGMT_LICENSES where upper(I_AGREE)='YES') c ".
                                     "  where a.pack_label = b.pack_name   (+)";
                    my @outputOEMPack = execSQL($host, $sqlOEMPack, "OEMPack");
                    $OEMQuery .= "SQL> select a.pack_display_label as OEM_PACK, \n".
                                 "    decode(b.pack_name, null, 'NO', 'YES') as PACK_ACCESS_GRANTED, \n".
                                 "    PACK_ACCESS_AGREED from \n".
                                 $OEMSchemaOwner .".MGMT_LICENSE_DEFINITIONS a, \n".
                                 $OEMSchemaOwner .".MGMT_ADMIN_LICENSES      b, \n".
                                 "      (select decode(count(*), 0, 'NO', 'YES') as PACK_ACCESS_AGREED \n".
                                 "        from ".$OEMSchemaOwner.".MGMT_LICENSES where upper(I_AGREE)='YES') c \n".
                                 "  where a.pack_label = b.pack_name   (+) \n".
                                 "  order by 1, 2;\n";

                    my $printOEMPackHeader = 0;
                    while (@outputOEMPack) {
                        $_ = shift(@outputOEMPack);
                        if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                            my ($packName, $pack_access_granted, $pack_access_agreed) = ($1, $2, $3);
                            if (!$printOEMPackHeader) {
                                $printOEMPackHeader = 1;
                                $OEMQuery .= "OEM_PACK         PACK_ACCESS_GRANTED         PACK_ACCESS_AGREED\n";
                                $OEMQuery .= "---------------  --------------------------  -------------------\n";
                            }
                            $OEMQuery .= $packName. " ". $pack_access_granted. " ". $pack_access_agreed;
                            if ($packName eq "Database Tuning Pack") {
                                $tuningPackQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $tuningPackInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $tuningPackUsed =1;
                                }
                            } elsif ($packName eq "Tuning Pack") {
                                $tuningPackQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $tuningPackInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $tuningPackUsed =1;
                                }
                            } elsif ($packName eq "Database Diagnostics Pack") {
                                $DiagPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $DiagPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $DiagPkUsed =1;
                                }
                            } elsif ($packName eq "Diagnostics Pack") {
                                $DiagPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $DiagPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $DiagPkUsed =1;
                                }
                            } elsif ($packName eq "Change Management Pack") {
                                $ChgPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $ChgPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $ChgPkUsed =1;
                                }
                            } elsif ($packName eq "Database Configuration Pack") {
                                $ConfigPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $ConfigPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $ConfigPkUsed =1;
                                }
                            } elsif ($packName eq "Configuration Pack") {
                                $ConfigPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $ConfigPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $ConfigPkUsed =1;
                                }
                            } elsif ($packName eq "Configuration Management Pack") {
                                $ConfigPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $ConfigPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $ConfigPkUsed =1;
                                }
                            } elsif ($packName eq "Database Configuration Management Pack") {
                                $ConfigPkQuery = $OEMQuery;
                                if ($pack_access_granted =~ /YES/) {
                                    $ConfigPkInstalled =1;
                                }
                                if ($pack_access_agreed  =~ /YES/) {
                                    $ConfigPkUsed =1;
                                }
                            }
                     
                        } elsif (/^(no rows selected)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $OEMQuery .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $OEMQuery .= $1 . "\n";
                            break;
                        }
                    }

                    eval {
                        &echo("Checking for OEM PACK ACCESS AGREEMENTS.");
                        my $sqlOEMAgreeLic = "SELECT '<BDNA>'||USERNAME||'<BDNA>'||TIMESTAMP||'<BDNA>'||I_AGREE||'<BDNA>' ".
                                             "FROM ".$OEMSchemaOwner.".MGMT_LICENSES ORDER BY TIMESTAMP";
                        my @outputOEMAgreeLic = execSQL($host, $sqlOEMAgreeLic, "OEMAgreeLic");
                        $OEMQuery .= "SQL> SELECT USERNAME, TIMESTAMP, I_AGREE FROM ".$OEMSchemaOwner.".MGMT_LICENSES ORDER BY TIMESTAMP;\n";
                        my $printOEMAgreeHeader = 0;
                        while (@outputOEMAgreeLic) {
                            $_ = shift(@outputOEMAgreeLic);
                            if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                                my ($uName, $tstamp, $agree) = ($1, $2, $3);
                                if (!$printOEMAgreeHeader) {
                                    $printOEMAgreeHeader = 1;
                                    $OEMQuery .= "USERNAME         TIMESTAMP         I_AGREE\n";
                                    $OEMQuery .= "---------------- ----------------- ----------\n";
                                }
                                $OEMQuery .= $uName." ". $tstamp. " ". $agree. "\n";

                            } elsif (/^(no rows selected)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            } elsif (/^(ORA-\d+: .*)$/) {
                                $OEMQuery .= $1 . "\n";
                            } elsif (/^(\d+ rows selected.)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            }
                        }
                    };

                    eval {
                        &echo("Checking for OEM MANAGED DATABASES");
                        my $sqlOEMDB = "SELECT '<BDNA>'||TARGET_NAME||'<BDNA>'||HOST_NAME||'<BDNA>'||LOAD_TIMESTAMP||'<BDNA>' ".
                                             "FROM ".$OEMSchemaOwner.".MGMT_TARGETS WHERE TARGET_TYPE='oracle_database' ORDER BY TARGET_NAME";
                        my @outputOEMDB = execSQL($host, $sqlOEMDB, "OEMDB");
                        $OEMQuery .= "SQL> SELECT TARGET_NAME,HOST_NAME, LOAD_TIMESTAMP FROM ".$OEMSchemaOwner.
                                     ".MGMT_TARGETS WHERE TARGET_TYPE='oracle_database' ORDER BY TARGET_NAME;\n";
                        my $printOEMDB = 0;
                        while (@outputOEMDB) {
                            $_ = shift(@outputOEMDB);
                            if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                               my ($tname, $hname, $timestamp) = ($1, $2, $3);
                               if (!$printOEMDB) {
                                    $printOEMDB = 1;
                                    $OEMQuery .= "TARGET_NAME         HOST_NAME         LOAD_TIMESTAMP\n";
                                    $OEMQuery .= "------------------  ----------------  ------------------\n";
                                }
                                $OEMQuery .= $tname." ". $hname. " ". $timestamp . "\n";

                            } elsif (/^(no rows selected)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            } elsif (/^(ORA-\d+: .*)$/) {
                                $OEMQuery .= $1 . "\n";
                            } elsif (/^(\d+ rows selected.)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            }
                        }
                    };

                    eval {
                        &echo("Checking for Control Management Pack Access");
                        my $sqlCtrlPk = "SELECT '<BDNA>'||NAME||'<BDNA>'||VALUE||'<BDNA>'||ISDEFAULT||'<BDNA>' ".
                                        " FROM V\$PARAMETER WHERE UPPER(NAME) LIKE '%CONTROL_MANAGEMENT_PACK_ACCESS%' ORDER BY 1";
                        my @outputCtrlPk = execSQL($host, $sqlCtrlPk, "CtrlPk");
                        $OEMQuery .= "SQL> SELECT NAME, VALUE, ISDEFAULT FROM V\$PARAMETER ".
                                     " WHERE UPPER(NAME) LIKE '%CONTROL_MANAGEMENT_PACK_ACCESS%' ORDER BY 1;\n";
                        my $printCtrlPk = 0;
                        while (@outputCtrlPk) {
                            $_ = shift(@outputCtrlPk);
                            if (/^<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>$/) {
                               my ($name, $value, $isdefault) = ($1, $2, $3);
                               if (!$printCtrlPkB) {
                                    $printCtrlPkB = 1;
                                    $OEMQuery .= "NAME         VALUE         ISDEFAULT\n";
                                    $OEMQuery .= "-----------  ------------- ------------------------------\n";
                                }
                                $OEMQuery .= $name." ". $value. " ". $isdefault . "\n";

                            } elsif (/^(no rows selected)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            } elsif (/^(ORA-\d+: .*)$/) {
                                $OEMQuery .= $1 . "\n";
                            } elsif (/^(\d+ rows selected.)$/) {
                                $OEMQuery .= $1 . "\n";
                                break;
                            }
                        }
                    };

                    $BDNA_Results{"ConfigPkInstalled"} = $ConfigPkInstalled;
                    $BDNA_Results{"b_ConfigPkInstalled"} = $ConfigPkInstalled;
                    $BDNA_Results{"ConfigPkUsed"} = $ConfigPkUsed;
                    $BDNA_Results{"b_ConfigPkUsed"} = $ConfigPkUsed;
                    $BDNA_Results{"ConfigPkQuery"} = $OEMQuery;
                    $BDNA_Results{"ChgPkInstalled"} = $ChgPkInstalled;
                    $BDNA_Results{"b_ChgPkInstalled"} = $ChgPkInstalled;
                    $BDNA_Results{"ChgPkUsed"} = $ChgPkUsed;
                    $BDNA_Results{"b_ChgPkUsed"} = $ChgPkUsed;
                    $BDNA_Results{"ChgPkQuery"} = $OEMQuery;
                    $BDNA_Results{"DiagPkInstalled"} = $DiagPkInstalled;
                    $BDNA_Results{"b_DiagPkInstalled"} = $DiagPkInstalled;
                    $BDNA_Results{"DiagPkUsed"} = $DiagPkUsed;
                    $BDNA_Results{"b_DiagPkUsed"} = $DiagPkUsed;
                    $BDNA_Results{"DiagPkQuery"} = $DiagPkQuery;
                    $BDNA_Results{"tuningPackInstalled"} = $tuningPackInstalled;
                    $BDNA_Results{"b_tuningPackInstalled"} = $tuningPackInstalled;
                    $BDNA_Results{"tuningPackUsed"} = $tuningPackUsed;
                    $BDNA_Results{"b_tuningPackUsed"} = $tuningPackUsed;
                    $BDNA_Results{"tuningPackQuery"} = $tuningPackQuery;
                }
            };
        }


        $BDNA_Results{"oemInstalled"} = $oemInstalled;
        $BDNA_Results{"b_oemInstalled"} = $oemInstalled;
        $BDNA_Results{"oemUsed"} = $oemUsed;
        $BDNA_Results{"b_oemUsed"} = $oemUsed;
        $BDNA_Results{"OEMQuery"} = $OEMQuery;
        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>


    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions6StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});
 
        my @arrLabel = ('Active Data Guard', 
                        'Real Application Testing', 
                        'Advanced Compression',
                        'Total Recall', 
                        'ExaData', 
                        'Change Management Pack',
                        'AS Provisioning and Patch Automation Pack', 
                        'Database Provisioning and Patch Automation Pack',
                        'Standalone Provisioning and Patch Automation Pack',
                        'Data Masking Pack');
        my @arrFeatureFilter = ("NAME='Data Guard' OR NAME='Active Data Guard'", 

                                "NAME='Database Replay: Workload Capture'".
                                " OR NAME='Database Replay: Workload Replay'".
                                " OR NAME='SQL Tuning Set (user)'".
                                " OR NAME='SQL Performance Analyzer'", 

                                "NAME='HeapCompression'".
                                " OR NAME='Backup ZLIB Compression'".
                                " OR NAME='Backup BZIP2 Compression'".
                                " OR NAME='Backup DEFAULT Compression'".
                                " OR NAME='Backup HIGH Compression'".
                                " OR NAME='Backup LOW Compression'".
                                " OR NAME='Backup MEDIUM Compression'".
                                " OR NAME='Backup ZLIB, Compression'".
                                " OR NAME='SecureFile Compression (user)'".
                                " OR NAME='SecureFile Deduplication (user)'",

                                "NAME='Flashback Database'".
                                " OR NAME='Flashback Data Archive'",

                                "NAME='Exadata'",
                                "NAME='Change Management Pack (GC)'",
                                "NAME='EM AS Provisioning and Patch Automation (GC)'",
                                "NAME='EM Database Provisioning and Patch Automation (GC)'",
                                "NAME='EM Standalone Provisioning and Patch Automation (GC)'",
                                "NAME='Data Masking Pack (GC)'");
        my @arrInstalled = ('activeDGuardInstalled', 
                            'realAppTestInstalled', 
                            'advCompressInstalled',
                            'totalRecallInstalled', 
                            'exaDataInstalled',
                            'ChgPkInstalled',
                            'ASProvPkInstalled',
                            'DBProvPkInstalled',
                            'SdProvPkInstalled',
                            'DMPkInstalled');
        my @arrUsed = ('activeDGuardUsed', 
                       'realAppTestUsed', 
                       'advCompressUsed',
                       'totalRecallUsed', 
                       'exaDataUsed',
                       'ChgPkUsed',
                       'ASProvPkUsed',
                       'DBProvPkUsed',
                       'SdProvPkUsed',
                       'DMPkUsed');
        my @b_arrInstalled = ('b_activeDGuardInstalled',
                            'b_realAppTestInstalled',
                            'b_advCompressInstalled',
                            'b_totalRecallInstalled',
                            'b_exaDataInstalled',
                            'b_ChgPkInstalled',
                            'b_ASProvPkInstalled',
                            'b_DBProvPkInstalled',
                            'b_SdProvPkInstalled',
                            'b_DMPkInstalled');
        my @b_arrUsed = ('b_activeDGuardUsed',
                       'b_realAppTestUsed',
                       'b_advCompressUsed',
                       'b_totalRecallUsed',
                       'b_exaDataUsed',
                       'b_ChgPkUsed',
                       'b_ASProvPkUsed',
                       'b_DBProvPkUsed',
                       'b_SdProvPkUsed',
                       'b_DMPkUsed');

        my @arrQuery = ('activeDGuardQuery', 
                        'realAppTestQuery', 
                        'advCompressQuery',
                        'totalRecallQuery', 
                        'exaDataQuery',
                        'ChgPkQuery',
                        'ASProvPkQuery',
                        'DBProvPkQuery',
                        'SdProvPkQuery',
                        'DMPkQuery');

        my @arrVerFilter = ('^11\..*', 
                            '^10\..*|^11\..*', 
                            '^11\..*',
                            '^11\..*', 
                            '^11\..*',
                            '^11\..*',
                            '^11\..*',
                            '^11\..*',
                            '^11\..*',
                            '^11\..*');

        my ($resultString, $index) = ('', 0);
        for ($index=0; $index< scalar(@arrLabel); $index++) {
            eval {
                &echo("DB Instance version: $version\n");
                &echo("Filter to check: $arrVerFilter[$index]\n");
                if ($version =~ /$arrVerFilter[$index]/) {
                    &echo("Querying from DBA_FEATURE_USAGE_STATISTICS FOR $arrLabel[$index]..\n");
                    my $sqlDBAFeature = "SELECT '<BDNA=>'||NAME||'<BDNA>'||DETECTED_USAGES" .
                                        "||'<BDNA>'||CURRENTLY_USED||'<BDNA>'||FIRST_USAGE_DATE" .
                                        "||'<BDNA>'||LAST_USAGE_DATE||'<=BDNA>'".
                                        " FROM DBA_FEATURE_USAGE_STATISTICS ".
                                        "WHERE $arrFeatureFilter[$index]";
                    &echo("sql to use: <$sqlDBAFeature>");
                    my $DBA_FEATURE_USAGE = "SQL> SELECT NAME, DETECTED_USAGES, CURRENTLY_USED, FIRST_USAGE_DATE, LAST_USAGE_DATE ".
                                            "FROM DBA_FEATURE_USAGE_STATISTICS WHERE $arrFeatureFilter[$index];\n";


                    my $featureUsed =0;
                    my $featureInstalled = 0;
                    my $printDBAFeatureHeader =0;
                    my @outputDBAFeature = &execSQL($host, $sqlDBAFeature, "dba_features");
                    my $output = join('', @outputDBAFeature);
                    $output =~ s/[\r|\n]//g;
                    $output =~ s/<=BDNA>/<=BDNA>\n/g;
                    @outputDBAFeature = split("\n",$output);
                    while (@outputDBAFeature) {
                        $_ = shift(@outputDBAFeature);
                        &echo($_);
                        if (/^<BDNA=>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<BDNA>(.*?)<=BDNA>/) {
                            # $featureInstalled =1;
                            my ($name, $detUsage, $curUsed, $firstUsed, $lastUsed) = ($1, $2, $3, $4, $5);
                            if (!$printDBAFeatureHeader) {
                                $printDBAFeatureHeader =1;
                                $DBA_FEATURE_USAGE .= "NAME". " ".
                                                      "DETECTED_USAGES". "  " .
                                                      "CURRENTLY_USED". "  " .
                                                      "FIRST_USAGE_DATE". "  " .
                                                      "LAST_USAGE_DATE". "\n";
                                $DBA_FEATURE_USAGE .= "-----------------  ".
                                                      "---------------  ".
                                                      "--------------  " .
                                                      "-----------------  ".
                                                      "-----------------\n";
                            }
                            $DBA_FEATURE_USAGE .= $name . " ";
                            $DBA_FEATURE_USAGE .= $detUsage . " ";
                            $DBA_FEATURE_USAGE .= $curUsed . " ";
                            $DBA_FEATURE_USAGE .= $firstUsed . " ";
                            $DBA_FEATURE_USAGE .= $lastUsed. "\n";
                            if ($curUsed eq 'TRUE') {
                                $featureUsed =1;
                            }
                        } elsif (/^(no rows selected)$/) {
                            $DBA_FEATURE_USAGE .= $1 . "\n";
                            break;
                        } elsif (/^(ORA-\d+: .*)$/) {
                            $DBA_FEATURE_USAGE .= $1 . "\n";
                        } elsif (/^(\d+ rows selected.)$/) {
                            $DBA_FEATURE_USAGE .= $1 . "\n";
                        }
                    }
                    $BDNA_Results{$arrQuery[$index]} .= $DBA_FEATURE_USAGE;
                    $BDNA_Results{$arrQuery[$index]} .= "\n";
                    $BDNA_Results{$arrInstalled[$index]} = $featureInstalled;
                    $BDNA_Results{$b_arrInstalled[$index]} = $featureInstalled;
                    $BDNA_Results{$arrUsed[$index]} = $featureUsed;
                    $BDNA_Results{$b_arrUsed[$index]} = $featureUsed;
                }
            };
        }

        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSRawDataDetailStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="hostName" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $dbName = $BDNA_Connection_Info{"instanceName"};
        my $hostName = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"};
        &echo("DatabaseName = ".$dbName.", HostName = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"});

        my $header = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        &echo("Querying Timestamp..");
        my $timeSQL = $header . "SELECT '<BDNA>'||SYSDATE||'<BDNA>' FROM DUAL ";
        my @outputTime = &execSQL($host, $timeSQL, "lms_time_doption");
        while (@outputTime) {
            my $oneRecord = shift(@outputTime);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsCollectTime"} = $1;
            }
        }

        &echo("Querying Banner..");
        my $bannerSQL = "SELECT '<BDNA=>'||BANNER||'<=BDNA>' FROM V\$VERSION ";
        my @outputBanner = &execSQL($host, $bannerSQL, "lms_banner");
        my $outputCombined = join('', @outputBanner);
        $outputCombined =~ s/[\r|\n]//g;
        $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
        @outputBanner = split("\n",$outputCombined);

        while (@outputBanner) {
            my $oneRecord = shift(@outputBanner);
            if ($oneRecord =~ /^<BDNA=>(.*?)<=BDNA>/) {
                if ($BDNA_Results{"lmsBanner"}) {
                    $BDNA_Results{"lmsBanner"} .= "\n";
                }
                $BDNA_Results{"lmsBanner"} .= $1;
            }
        }

        &echo("Querying DB_ROLE, INSTALL_DATE..");
        my $dbSQL = $header . "SELECT '<BDNA>'||DATABASE_ROLE||'<BDNA>'||CREATED||'<BDNA>' FROM V\$DATABASE ";
        my @outputDB = &execSQL($host, $dbSQL, "lms_DB");
        while (@outputDB) {
            my $oneRecord = shift(@outputDB);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsDBRole"} = $1;
                $BDNA_Results{"lmsInstallDate"} = $2;
            }
        }

        $BDNA_Results{"lmsScriptVersion"} = '15.1';
        $BDNA_Results{"lmsMachineID"} = $hostName;
        $BDNA_Results{"lmsDBName"} = $dbName;

        $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>


    <scriptTable
        scriptName="UNIXOracleInstanceLMSRawDataOptionsStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="hostName" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $dbName = $BDNA_Connection_Info{"instanceName"};
        my $hostName = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"};
        &echo("DatabaseName = ".$dbName.", HostName = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"});

        my $shead = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        &echo("Querying Timestamp Table..");
        my $timeSQL = $shead . "SELECT '<BDNA>'||SYSDATE||'<BDNA>' FROM DUAL ";
        my @outputTime = &execSQL($host, $timeSQL, "lms_time_option");
        while (@outputTime) {
            my $oneRecord = shift(@outputTime);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsCollectTime"} = $1;        
            }
        }

        &echo("Creating LMS_OPTION Table..");
        my $header = "SET ECHO ON \ndefine MACHINE_ID=$hostName \ndefine DB_NAME=$dbName \ndefine DBL=''\ndefine TNS_NAME=''\n ";

 
        my $createSQL = $header . qq#

DROP TABLE LMS_OPTIONS
/
CREATE TABLE LMS_OPTIONS
(
    MACHINE_ID VARCHAR2(255),
    DB_NAME VARCHAR2(255),
    TIMESTAMP DATE,
    HOST_NAME VARCHAR2(255),
    INSTANCE_NAME VARCHAR2(255),
    OPTION_NAME VARCHAR2(255),
    OPTION_QUERY VARCHAR2(255),
    SQL_ERR_CODE VARCHAR2(255),
    SQL_ERR_MESSAGE VARCHAR2(255),
    COL010 VARCHAR2(255),
    COL020 VARCHAR2(255),
    COL030 VARCHAR2(255),
    COL040 VARCHAR2(255),
    COL050 VARCHAR2(255),
    COL060 VARCHAR2(255),
    COL070 VARCHAR2(255),
    COL080 VARCHAR2(255),
    COL090 VARCHAR2(255),
    COL100 VARCHAR2(255)
)
/
DROP TABLE TMP_LMS_OPTIONS
/
CREATE TABLE TMP_LMS_OPTIONS AS 
SELECT * FROM LMS_OPTIONS
/
REM
REM     This script checks
REM      * Database version installed
REM      * Database CPU number
REM      * Stand by server name  (if is installed on OEE)
REM
REM     Also checks for the options installed and confirms if
REM     options are being used:
REM      * OLAP                  * SPATIAL
REM      * PARTITIONING          * RAC (Real Application Clusters)
REM      * LABEL SECURITY        * OEM (Oracle Enterprise Manager) PACKS
REM      * DATA MINING           * AUDIT VAULT
REM      * DATABASE VAULT        * CONTENT DATABASE
REM      * RECORDS DATABASE      * ADVANCED SECURITY
REM      * ACTIVE DATA GUARD     * ADVANCED COMPRESSION
REM      * MULTITENANT
REM
REM       Parameters:
REM       1 = machine_id for the measured database (as entered in lms_dblist)
REM       2 = db_name    for the measured database (as entered in lms_dblist)
REM       3 = tns_name   for the measured database (as entered in lms_dblist)

define SCRIPT_RELEASE=15.1

SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
SET TERMOUT ON
SET TAB OFF
SET TRIMOUT OFF
SET TRIMSPOOL OFF
SET PAGESIZE 5000
SET LINESIZE 300
SET SERVEROUTPUT ON SIZE 1000000
SET SERVEROUTPUT ON SIZE UNLIMITED

alter session set NLS_LANGUAGE='AMERICAN';
alter session set NLS_TERRITORY='AMERICA';
alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';
alter session set NLS_TIMESTAMP_FORMAT='YYYY-MM-DD_HH24:MI:SS';
alter session set NLS_TIMESTAMP_TZ_FORMAT='YYYY-MM-DD_HH24:MI:SS_TZH:TZM';
alter session set GLOBAL_NAMES = FALSE;

-- Get host_name and instance_name
define INSTANCE_NAME=ERR_NEW_VAL_INSTANCE_NAME
col C1 new_val INSTANCE_NAME noprint
define HOST_NAME=ERR_NEW_VAL_HOST_NAME
col C2 new_val HOST_NAME noprint
define SYS_TIME=ERR_NEW_VAL_SYS_TIME
col C3 new_val SYS_TIME noprint

select sysdate C3 from dual;

define MACHINE_ID=&1
define DB_NAME=&2
define TNS_NAME=&3
define DBL=''

col DB_LINK new_val DBL noprint

SELECT '@'||'&TNS_NAME.' as DB_LINK
FROM   LMS_VAR
WHERE  nvl(upper(O_SID), 'nnuull') != nvl(upper('&TNS_NAME.'), 'nnuull');

-- Oracle7
SELECT min(machine) C2 FROM v\$session&DBL WHERE type = 'BACKGROUND';
SELECT name    C1 FROM v\$database&DBL;
-- Oracle8 and higher
SELECT instance_name C1, host_name C2 FROM v\$instance&DBL;

-- Prepare to select DBA_USERS information from the proper source
define DBA_USERS_SOURCE=SYS.AUDIT_DBA_USERS&DBL
col C1 new_val DBA_USERS_SOURCE noprint
-- This query will work only if DBA_USERS is accessible
prompt Checking select on DBA_USERS privilege . . .
select 'DBA_USERS&DBL' C1 from DBA_USERS&DBL where rownum=1;
col C1 clear

prompt Collecting from DB_LINK=[&DBL.] HOST_NAME=[&HOST_NAME.] INSTANCE_NAME=[&INSTANCE_NAME.] DBA_USERS_SOURCE=[&DBA_USERS_SOURCE.]
prompt

----------------
-- DB Version --
----------------
define OPTION_NAME=V\$VERSION
define OPTION_QUERY=NULL
DECLARE
  mycode number;
  myerr varchar2 (3000);
  does_not_exist exception;
  PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  EXECUTE IMMEDIATE ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
        BANNER
      FROM V\$VERSION&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE
  )
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr
  );
       GOTO abc1;
end;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc1>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

--------------------------
-- DB Options Installed --
--------------------------
define OPTION_NAME=V\$OPTION
define OPTION_QUERY=NULL
DECLARE
  mycode number;
  myerr varchar2 (3000);
  does_not_exist exception;
  PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      PARAMETER,
      VALUE
    FROM  V\$OPTION&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc2;
end;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc2>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------------------------------
-- DBA_REGISTRY (9i_r2 and higher) --   !!!! user does not have enough rights to access DBA_REGISTRY object
-------------------------------------
define OPTION_NAME=DBA_REGISTRY
define OPTION_QUERY=>=9i_r2
DECLARE
  mycode number;
  myerr varchar2 (3000);
  does_not_exist exception;
  PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      COMP_NAME,
      VERSION,
      STATUS,
      MODIFIED,
      SCHEMA
    FROM
      DBA_REGISTRY&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
        mycode,
        myerr);
       GOTO abc3;
end;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc3>>
 dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------------------------------------------------
-- 10g DBA_FEATURE_USAGE_STATISTICS (10g and higher) --
-------------------------------------------------------
define OPTION_NAME=DBA_FEATURE_USAGE_STATISTICS
define OPTION_QUERY=10g
DECLARE
        mycode number;
        myerr varchar2 (3000);
BEGIN
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into lms_options
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090
    )
    SELECT
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      NAME                ,
      VERSION             ,
      DETECTED_USAGES     ,
      TOTAL_SAMPLES       ,
      CURRENTLY_USED      ,
      FIRST_USAGE_DATE    ,
      LAST_USAGE_DATE     ,
      LAST_SAMPLE_DATE    ,
      SAMPLE_INTERVAL
    FROM
      DBA_FEATURE_USAGE_STATISTICS&DBL
  ');
  -- Recording 'no rows selected' case
  IF SQL%ROWCOUNT=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/
-------------------------------------------------------
-- 10g DBA_FEATURE_USAGE_STATISTICS.FEATURE_INFO (10g and higher) --
-------------------------------------------------------
define OPTION_NAME=DBA_FEATURE_USAGE_STATISTICS
define OPTION_QUERY=FEATURE_INFO
DECLARE
        mycode number;
        myerr varchar2 (3000);
BEGIN
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  delete from TMP_FEATURE_INFO;
  EXECUTE IMMEDIATE ('INSERT into TMP_FEATURE_INFO (FEATURE_INFO, NAME, VERSION)
    SELECT
      FEATURE_INFO,
      NAME,
      VERSION
    FROM
      DBA_FEATURE_USAGE_STATISTICS&DBL
  ');
  -- Recording 'no rows selected' case
  IF SQL%ROWCOUNT=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  END IF;
  EXECUTE IMMEDIATE ('insert into lms_options
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    SELECT
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      substr(FEATURE_INFO, 1, 1000),
      NAME,
      VERSION
    FROM
      TMP_FEATURE_INFO
      WHERE FEATURE_INFO IS NOT NULL
  ');
  delete from TMP_FEATURE_INFO;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

------------------
-- Partitioning --
------------------
define OPTION_NAME=PARTITIONING
define OPTION_QUERY=PARTITIONED_SEGMENTS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    select distinct
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER,
      OBJECT_TYPE,
      OBJECT_NAME,
      min(CREATED),
      min(LAST_DDL_TIME)
    from DBA_OBJECTS&DBL
      where OBJECT_TYPE LIKE ''%PARTITION%''
      group by OWNER, OBJECT_TYPE, OBJECT_NAME
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

define OPTION_QUERY=OLAP_AWS_SEGMENTS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      aw_owner      ,
      aw_name       ,
      aw_version    ,
      object_type   ,
      owner         ,
      object_name   ,
      table_name
    from (
    select distinct
           c.owner as aw_owner,
           c.aw_name,
           c.aw_version,
           d.object_type,
           d.owner,
           d.object_name,
           d.object_name as table_name
      from dba_aws      c
      join dba_objects  d on c.owner = d.owner and ''AW\$''||c.aw_name = d.object_name
      where d.object_type like ''%PARTITION%''
    union all
    select distinct
           e.owner as aw_owner,
           e.aw_name,
           e.aw_version,
           g.object_type,
           g.owner,
           g.object_name,
           f.table_name
      from dba_aws            e
      join dba_lobs           f on e.owner = f.owner and ''AW\$''||e.aw_name = f.table_name
      join dba_objects        g on f.owner = g.owner and f.segment_name = g.object_name
      where g.object_type like ''%PARTITION%''
    union all
    select distinct
           e.owner as aw_owner,
           e.aw_name,
           e.aw_version,
           g.object_type,
           g.owner,
           g.object_name,
           f.table_name
    from DBA_AWS&DBL        e
    join DBA_INDEXES&DBL    f on e.owner = f.table_owner and ''AW\$''||e.aw_name = f.table_name
    join DBA_OBJECTS&DBL    g on f.owner = g.owner and f.index_name = g.object_name
      where g.object_type like ''%PARTITION%''
      order by owner, aw_name, object_type, object_name
         )
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

define OPTION_QUERY=PARTITION_OBJ_RECYCLEBIN
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER,
      ORIGINAL_NAME,
      OBJECT_NAME,
      TYPE,
      CREATETIME,
      DROPTIME,
      PARTITION_NAME,
      SPACE,
      CAN_UNDROP
    from (
      select OWNER, ORIGINAL_NAME, OBJECT_NAME, TYPE, CREATETIME, DROPTIME, PARTITION_NAME, SPACE, CAN_UNDROP
        from DBA_RECYCLEBIN&DBL
        where TYPE not like ''%Partition%''
          and (OWNER, OBJECT_NAME) in (select OWNER, OBJECT_NAME from DBA_RECYCLEBIN where TYPE like ''%Partition%'')
      union all
      select OWNER, ORIGINAL_NAME, OBJECT_NAME, TYPE, CREATETIME, DROPTIME, PARTITION_NAME, SPACE, CAN_UNDROP
        from DBA_RECYCLEBIN&DBL
        where TYPE like ''%Partition%''
         )
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

-------------------------------------
-- RAC (REAL APPLICATION CLUSTERS) --
-------------------------------------
define OPTION_NAME=RAC
define OPTION_QUERY=GV\$INSTANCE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      INSTANCE_NAME,
      HOST_NAME,
      INST_ID,
      STATUS
    FROM
      GV\$INSTANCE&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc8;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc8>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

--------------------
-- LABEL SECURITY --
--------------------
define OPTION_NAME=LABEL_SECURITY
define OPTION_QUERY=LBAC\$POLT_COUNT
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      LBACSYS.LBAC\$POLT&DBL
      WHERE OWNER <> ''SA_DEMO''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc9;
END;

IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc9>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-----------------------------------------
-- OEM
------------------------------------------
-- Check for running known OEM Programs --
------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=RUNNING_PROGRAMS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      PROGRAM
    FROM
      V\$SESSION&DBL
      WHERE
        upper(program) LIKE ''%XPNI.EXE%''
        OR upper(program) LIKE ''%VMS.EXE%''
        OR upper(program) LIKE ''%EPC.EXE%''
        OR upper(program) LIKE ''%TDVAPP.EXE%''
        OR upper(program) LIKE ''VDOSSHELL%''
        OR upper(program) LIKE ''%VMQ%''
        OR upper(program) LIKE ''%VTUSHELL%''
        OR upper(program) LIKE ''%JAVAVMQ%''
        OR upper(program) LIKE ''%XPAUTUNE%''
        OR upper(program) LIKE ''%XPCOIN%''
        OR upper(program) LIKE ''%XPKSH%''
        OR upper(program) LIKE ''%XPUI%''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc10;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc10>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

----------------------------------------------------------
-- PL/SQL anonymous block to Check for known OEM tables --
----------------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=REPOSITORY
DECLARE
    cursor1 integer;
    v_count number(1);
    v_schema dba_tables.owner%TYPE;
    v_version varchar2(10);
    v_component varchar2(20);
    v_i_name varchar2(10);
    v_h_name varchar2(30);
    stmt varchar2(200);
    rows_processed integer;
    CURSOR schema_array IS
    SELECT owner
    FROM dba_tables&DBL WHERE table_name = 'SMP_REP_VERSION';
    CURSOR schema_array_v2 IS
    SELECT owner
    FROM dba_tables&DBL WHERE table_name = 'SMP_VDS_REPOS_VERSION';
BEGIN
    -- SELECT instance_name,host_name INTO v_i_name, v_h_name FROM v\$instance&DBL; !!!! user does not have enough rights to access DBA_REGISTRY object
    OPEN schema_array;
    OPEN schema_array_v2;
    cursor1 := dbms_sql.open_cursor;
    v_count := 0;
    LOOP -- this loop steps through each valid schema.
       FETCH schema_array INTO v_schema;
       EXIT WHEN schema_array%notfound;
       v_count := v_count + 1;
       dbms_sql.parse(cursor1,'select c_current_version, c_component from '||v_schema||'.smp_rep_version&DBL', dbms_sql.native);
       dbms_sql.define_column(cursor1, 1, v_version, 10);
       dbms_sql.define_column(cursor1, 2, v_component, 20);
       rows_processed:=dbms_sql.execute ( cursor1 );
       loop -- to step through cursor1 to find console version.
          if dbms_sql.fetch_rows(cursor1) >0 then
             dbms_sql.column_value (cursor1, 1, v_version);
             dbms_sql.column_value (cursor1, 2, v_component);
             if v_component = 'CONSOLE' then
  --             dbms_output.put_line ('GREP_PREFIX.,OEM,REPOSITORY1,'||v_count||',dbms_output,Schema '||rpad(v_schema,15)||' has a repository version '||v_version||'');
                INSERT INTO LMS_OPTIONS
                 (MACHINE_ID,
                  DB_NAME,
                  TIMESTAMP,
      HOST_NAME,
                  INSTANCE_NAME,
                  OPTION_NAME,
                  OPTION_QUERY,
                  SQL_ERR_CODE,
                  SQL_ERR_MESSAGE,
                  COL010)
                VALUES
                 ('&MACHINE_ID.',
                  '&DB_NAME.',
                  '&SYS_TIME.',
                  '&HOST_NAME.',
                  '&INSTANCE_NAME.',
                  '&OPTION_NAME.',
                  'REPOSITORY1',
                  0,
                  NULL,
                  'Schema '||rpad(v_schema,15)||' has a repository version '||v_version||'');
                exit;
             end if;
          else
             exit;
          end if;
       end loop;
    END LOOP;
    LOOP -- this loop steps through each valid V2 schema.
      FETCH schema_array_v2 INTO v_schema;
      EXIT WHEN schema_array_v2%notfound;
      v_count := v_count + 1;
      --dbms_output.put_line ('GREP_PREFIX.,OEM,REPOSITORY2,'||v_count||',dbms_output,Schema '||rpad(v_schema,15)||' has a repository version 2.x' );
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE,
        COL010)
      VALUES
       ('&MACHINE_ID.',
        '&DB_NAME.',
        '&SYS_TIME.',
        '&HOST_NAME.',
        '&INSTANCE_NAME.',
        '&OPTION_NAME.',
        'REPOSITORY2',
        0,
        NULL,
        'Schema '||rpad(v_schema,15)||' has a repository version 2.x');
    end loop;
    dbms_sql.close_cursor (cursor1);
    close schema_array;
    close schema_array_v2;
    if v_count = 0 then
      --dbms_output.put_line ('GREP_PREFIX.,OEM,NO_REPOSITORY,'||v_count||',dbms_output,There are NO OEM repositories with version prior to 10g on this instance - '||v_i_name||' on host '||v_h_name||'');
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE,
        COL010)
      VALUES
       ('&MACHINE_ID.',
        '&DB_NAME.',
        '&SYS_TIME.',
        '&HOST_NAME.',
        '&INSTANCE_NAME.',
        '&OPTION_NAME.',
        'REPOSITORY2',
        0,
        NULL,
        'There are NO OEM repositories with version prior to 10g on this instance - '||v_i_name||' on host '||v_h_name||'');
    end if;
END;
/

------------------------
-- OEM 10G AND HIGHER --
------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_ADMIN_LICENSES
define OEMOWNER=SYSMAN
col OEMOWNER new_val OEMOWNER format a30 wrap noprint
select owner as OEMOWNER from dba_tables&DBL where table_name = 'MGMT_ADMIN_LICENSES';
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      b.pack_name,
      a.pack_label,
      a.target_type,
      a.pack_display_label,
      c.PACK_ACCESS_AGREED
    FROM
      &&OEMOWNER..MGMT_LICENSE_DEFINITIONS&DBL a,
      &&OEMOWNER..MGMT_ADMIN_LICENSES&DBL      b,
      (SELECT DECODE(COUNT(*), 0, ''NO'',''YES'') AS PACK_ACCESS_AGREED
        FROM &&OEMOWNER..MGMT_LICENSES&DBL where upper(I_AGREE)=''YES'') c
       WHERE a.pack_label = b.pack_name   (+)');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc11;
END;

IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc11>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

------------------------------------------------
-- OEM PACK ACCESS AGREEMENTS (10g or higher) --
------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_LICENSES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      USERNAME,
      TIMESTAMP,
      I_AGREE
    FROM
      &&OEMOWNER..MGMT_LICENSES&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc12;
END;

IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc12>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------------------------------------
-- OEM MANAGED DATABASES (10g or higher) --
-------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_TARGETS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      TARGET_NAME,
      HOST_NAME,
      LOAD_TIMESTAMP
    FROM
      &&OEMOWNER..MGMT_TARGETS&DBL
    WHERE TARGET_TYPE = ''oracle_database''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc13;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc13>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

---------------------------------------------------
-- OEM MGMT_LICENSE_CONFIRMATION (10g or higher) --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_LICENSE_CONFIRMATION
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
       a.CONFIRMATION,
       a.CONFIRMED_BY,
       a.CONFIRMED_TIME,
       b.TARGET_NAME,
       b.TARGET_TYPE,
       b.TYPE_DISPLAY_NAME
    FROM
      &&OEMOWNER..MGMT_LICENSE_CONFIRMATION&DBL a,
      &&OEMOWNER..MGMT_TARGETS&DBL b
    WHERE a.TARGET_GUID = b.TARGET_GUID (+)');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc141;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc141>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

---------------------------------------------
-- OEM SQL PROFILES CHECKS (10g or higher) --
---------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=SQL_PROFILES
DECLARE
        mycode number;
        myerr varchar2 (3000);
BEGIN
  -- Using dynamic SQL to count rows
  EXECUTE IMMEDIATE ('select count(*)
   from dba_sql_profiles&DBL
   where lower(status) like ''enabled''
  ')
  INTO mycode
  ;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into lms_options
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      :1           ,
      name         ,
      created      ,
      last_modified,
      description  ,
      type         ,
      status
   from dba_sql_profiles&DBL
   where lower(status) like ''enabled''
  ')
  USING mycode
  ;
  -- Recording 'no rows selected' case
  IF SQL%ROWCOUNT=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------------------
-- OEM 10g Grid Control; OEM Grid Control 11g; OEM 11g Database Control
-----------------------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=GRID_CONTROL+11g
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      tt.type_display_name,
      tg.host_name,
      tg.target_name ,
      ld.pack_display_label,
      decode(lt.pack_name  , null, ''NO'', ''YES''),
      decode(lc.target_guid, null, ''NO'', ''YES'') ,
      lc.confirmed_time,
      lc.confirmed_by,
      tg.target_type,
      ld.pack_label
  from              &&OEMOWNER..MGMT_TARGETS&DBL                  tg
    left outer join &&OEMOWNER..MGMT_TARGET_TYPES&DBL             tt on tg.target_type = tt.target_type
         inner join &&OEMOWNER..MGMT_LICENSE_DEFINITIONS&DBL      ld on tg.target_type = ld.target_type
    left outer join &&OEMOWNER..MGMT_LICENSED_TARGETS&DBL         lt on tg.target_guid = lt.target_guid and ld.pack_label = lt.pack_name
    left outer join &&OEMOWNER..MGMT_LICENSE_CONFIRMATION&DBL     lc on tg.target_guid = lc.target_guid
  order by tg.host_name, tt.type_display_name, tg.target_name, ld.pack_display_label  ');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc143;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc143>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------
-- SPATIAL --
-------------
define OPTION_NAME=SPATIAL
define OPTION_QUERY=ALL_SDO_GEOM_METADATA
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      SDO_OWNER,
      SDO_TABLE_NAME,
      substr(SDO_COLUMN_NAME, 1, 250)
    from MDSYS.SDO_GEOM_METADATA_TABLE&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

-----------------
-- DATA MINING --
-----------------
-- 9i --
--------
define OPTION_NAME=DATA_MINING
define OPTION_QUERY=09i.ODM_MINING_MODEL
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      ODM.ODM_MINING_MODEL&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc16;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc16>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-----------
-- 10gv1 --
-----------
define OPTION_NAME=DATA_MINING
define OPTION_QUERY=10gv1.DM\$OBJECT
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      DMSYS.DM\$OBJECT&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc17;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc17>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-----------
-- 10gv2 --
-----------
define OPTION_NAME=DATA_MINING
define OPTION_QUERY=10gv2.DM\$P_MODEL
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      DMSYS.DM\$P_MODEL&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc18;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc18>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

---------
-- 11g --
---------
define OPTION_NAME=DATA_MINING
define OPTION_QUERY=11g.DM\$P_MODEL
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      SYS.MODEL\$&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc181;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc181>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

define OPTION_QUERY=11g+.DBA_MINING_MODELS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER           ,
      MODEL_NAME      ,
      MINING_FUNCTION ,
      ALGORITHM       ,
      CREATION_DATE   ,
      BUILD_DURATION  ,
      MODEL_SIZE
    from SYS.DBA_MINING_MODELS&DBL
    order by OWNER, MODEL_NAME
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

--------------------
-- DATABASE VAULT --
--------------------
define OPTION_NAME=DATABASE_VAULT
define OPTION_QUERY=DVSYS_SCHEMA
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      MAX(USERNAME)
    FROM
      &DBA_USERS_SOURCE.
    WHERE UPPER(username)=''DVSYS''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc20;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc20>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

define OPTION_NAME=DATABASE_VAULT
define OPTION_QUERY=DVF_SCHEMA
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      UPPER(USERNAME)
    FROM
      &DBA_USERS_SOURCE.
    WHERE UPPER(username)=''DVF''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc21;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc21>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

define OPTION_NAME=DATABASE_VAULT
define OPTION_QUERY=DVSYS.DBA_DV_REALM

DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;

  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      NAME       ,
      DESCRIPTION,
      ENABLED
  from DVSYS.DBA_DV_REALM&DBL
  order by NAME
  ');

  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;

  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');

EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');

      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

-----------------
-- AUDIT VAULT --
-----------------
define OPTION_NAME=AUDIT_VAULT*
define OPTION_QUERY=AVSYS_SCHEMA
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      MAX(USERNAME)
    FROM
      &DBA_USERS_SOURCE.
    WHERE UPPER(USERNAME)=''AVSYS''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc23;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc23>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------------------------------------
-- CONTENT DATABASE and RECORDS DATABASE --
-------------------------------------------
define OPTION_NAME=CONTENT_AND_RECORDS
define OPTION_QUERY=CONTENT_SCHEMA
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      MAX(USERNAME)
    FROM
      &DBA_USERS_SOURCE.
    WHERE UPPER(USERNAME)=''CONTENT''');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc24;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc24>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------
-- CONTENT --
-------------
define OPTION_NAME=CONTENT_DATABASE
define OPTION_QUERY=ODM_DOCUMENT
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      ODM_DOCUMENT&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc25;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc25>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-------------
-- RECORDS --
-------------
define OPTION_NAME=RECORDS_DATABASE
define OPTION_QUERY=ODM_RECORD
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      count(*)
    FROM
      ODM_RECORD&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc26;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc26>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

-----------------------------------------------
-- CPU/CORES/SOCKETS (For 10g_r2 and higher) --
-----------------------------------------------
define OPTION_NAME=CPU_CORES_SOCKETS
define OPTION_QUERY=10g_r2.V\$LICENSE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
      SESSIONS_HIGHWATER,
      CPU_COUNT_CURRENT,
      CPU_CORE_COUNT_CURRENT,
      CPU_SOCKET_COUNT_CURRENT,
      CPU_COUNT_HIGHWATER,
      CPU_CORE_COUNT_HIGHWATER,
      CPU_SOCKET_COUNT_HIGHWATER
    FROM
      V\$LICENSE&DBL');
  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
  HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc27;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc27>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

---------------------------------------------------
-- GV\$PARAMETER --
---------------------------------------------------
define OPTION_NAME=GV\$PARAMETER
define OPTION_QUERY=NULL

DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;

  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      INST_ID     ,
      NAME        ,
      VALUE       ,
      ISDEFAULT   ,
      DESCRIPTION
    from GV\$PARAMETER&DBL
    where upper(NAME) like ''%CPU_COUNT%''
       or upper(NAME) like ''%FAL_CLIENT%''
       or upper(NAME) like ''%FAL_SERVER%''
       or upper(NAME) like ''%CLUSTER%''
       or upper(NAME) like ''%CONTROL_MANAGEMENT_PACK_ACCESS%''
       or upper(NAME) like ''%ENABLE_DDL_LOGGING%''
       or upper(NAME) like ''%COMPATIBLE%''
       or upper(NAME) like ''%LOG_ARCHIVE_DEST%''
       or upper(NAME) like ''%O7_DICTIONARY_ACCESSIBILITY%''
       or upper(NAME) like ''%ENABLE_PLUGGABLE_DATABASE%''
       or upper(NAME) like ''%INMEMORY%''
       order by NAME, INST_ID
  ');

  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;

  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');

EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');

      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

------------------
--     OWB      --
------------------
define OPTION_NAME=OWB
define OPTION_QUERY=REPOSITORY
DECLARE
  CURSOR schema_array IS
  SELECT owner
  FROM dba_tables&DBL WHERE table_name = 'CMPSYSCLASSES';
  c_installed_ver   integer;
  rows_processed    integer;
  v_schema          dba_tables.owner%TYPE;
  v_schema_cnt      integer;
  v_version         varchar2(15);
  v_output          varchar2(4000);

BEGIN
  v_output:='';
  OPEN schema_array;
  c_installed_ver := dbms_sql.open_cursor;
  <<owb_schema_loop>>
  LOOP -- For each valid schema...
    FETCH schema_array INTO v_schema;
    EXIT WHEN schema_array%notfound;
    --Determine if current schema is valid (contains CMPInstallation_V view)
    dbms_sql.parse(c_installed_ver,'select installedversion from '|| v_schema || '.CMPInstallation_v&DBL where name = ''Oracle Warehouse Builder''',dbms_sql.native);
  dbms_sql.define_column(c_installed_ver, 1, v_version, 15);
  rows_processed:=dbms_sql.execute ( c_installed_ver );
      loop -- Find OWB version.
        if dbms_sql.fetch_rows(c_installed_ver) > 0 then
          dbms_sql.column_value (c_installed_ver, 1, v_version);
          v_schema_cnt := v_schema_cnt + 1;
          insert into lms_options (
            MACHINE_ID,
            DB_NAME,
            TIMESTAMP,
            HOST_NAME,
            INSTANCE_NAME,
            OPTION_NAME,
            OPTION_QUERY,
            COL010
         )
         VALUES (
           '&MACHINE_ID.',
           '&DB_NAME.',
           '&SYS_TIME.',
           '&HOST_NAME.',
           '&INSTANCE_NAME.',
           '&OPTION_NAME.',
           '&OPTION_QUERY.',
           'Schema '||v_schema||' contains a version '||v_version||' repository'
         );
        else
          exit;
        end if;
      end loop;
  end loop;
END;
/

--------------------------------------------
-- DBA_CPU_USAGE_STATISTICS (For 10g_r2 and higher)
--------------------------------------------
define OPTION_NAME=DBA_CPU_USAGE_STATISTICS
define OPTION_QUERY=DBA_CPU_USAGE_STATISTICS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        does_not_exist exception;
        PRAGMA EXCEPTION_INIT(does_not_exist, -942);
BEGIN
begin
  execute immediate ('insert into lms_options
    (
      MACHINE_ID,
      DB_NAME,
      TIMESTAMP,
      HOST_NAME,
      INSTANCE_NAME,
      OPTION_NAME,
      OPTION_QUERY,
      COL010,
      COL020,
    COL030,
    COL040,
    COL050
    )
    SELECT
      ''&MACHINE_ID.'',
      ''&DB_NAME.'',
      ''&SYS_TIME.'',
      ''&HOST_NAME.'',
      ''&INSTANCE_NAME.'',
      ''&OPTION_NAME.'',
      ''&OPTION_QUERY.'',
        VERSION,
        TIMESTAMP,
    CPU_COUNT ,
        CPU_CORE_COUNT,
        CPU_SOCKET_COUNT
    FROM DBA_CPU_USAGE_STATISTICS&DBL ');

  EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      INSERT INTO LMS_OPTIONS
       (MACHINE_ID,
        DB_NAME,
        TIMESTAMP,
      HOST_NAME,
        INSTANCE_NAME,
        OPTION_NAME,
        OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
        ('&MACHINE_ID.',
         '&DB_NAME.',
         '&SYS_TIME.',
         '&HOST_NAME.',
         '&INSTANCE_NAME.',
         '&OPTION_NAME.',
         '&OPTION_QUERY.',
         mycode,
         myerr);
       GOTO abc34;
END;
IF SQL%ROWCOUNT=0 THEN
  INSERT INTO LMS_OPTIONS
   (MACHINE_ID,
    DB_NAME,
    TIMESTAMP,
    HOST_NAME,
    INSTANCE_NAME,
    OPTION_NAME,
    OPTION_QUERY,
    SQL_ERR_CODE,
    SQL_ERR_MESSAGE
   )
  VALUES
   ('&MACHINE_ID.',
    '&DB_NAME.',
    '&SYS_TIME.',
    '&HOST_NAME.',
    '&INSTANCE_NAME.',
    '&OPTION_NAME.',
    '&OPTION_QUERY.',
    0,
    'no rows selected');
END IF;
<<abc34>>
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
END;
/

--------------------------------------------
-- Active Data Guard for 11gr1 (introduced in 11g r1)
--------------------------------------------
define OPTION_NAME=ACTIVE_DATA_GUARD
define OPTION_QUERY=11gr1
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      a.DEST_ID        ,
      a.DEST_NAME      ,
      a.STATUS         ,
      a.TYPE           ,
      a.DATABASE_MODE  ,
      a.RECOVERY_MODE  ,
      a.DESTINATION    ,
      a.DB_UNIQUE_NAME ,
      b.VALUE
    from V\$ARCHIVE_DEST_STATUS&DBL a, V\$PARAMETER&DBL b
      where b.NAME = ''compatible'' and b.VALUE like ''1%'' and b.VALUE not like ''10%''
        and a.RECOVERY_MODE like ''MANAGED%'' and a.STATUS = ''VALID'' and a.DATABASE_MODE = ''OPEN_READ-ONLY''
      order by a.DEST_ID
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

define OPTION_QUERY=V\$DATABASE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100,
      COL110
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      DBID             ,
      NAME             ,
      DB_UNIQUE_NAME   ,
      OPEN_MODE        ,
      DATABASE_ROLE    ,
      REMOTE_ARCHIVE   ,
      DATAGUARD_BROKER ,
      GUARD_STATUS     ,
      PLATFORM_NAME    ,
      CREATED          ,
      CONTROLFILE_CREATED
    from V\$DATABASE&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

-------------------------------------------------------
-- Advanced Compression Option (introduced in 11g r1)
-------------------------------------------------------
define OPTION_NAME=ADVANCED_COMPRESSION
define OPTION_QUERY=TABLE_COMPRESSION
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_TABLES''            as source_, owner      , table_name, '''' as partition_name, compression, compress_for
      from DBA_TABLES&DBL
      where compress_for in (''FOR ALL OPERATIONS'', ''OLTP'', ''ADVANCED'')
    union all
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_TAB_PARTITIONS''    as source_, table_owner, table_name, partition_name        , compression, compress_for
      from DBA_TAB_PARTITIONS&DBL
      where compress_for in (''FOR ALL OPERATIONS'', ''OLTP'', ''ADVANCED'')
    union all
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_TAB_SUBPARTITIONS'' as source_, table_owner, table_name, partition_name        , compression, compress_for
      from DBA_TAB_SUBPARTITIONS&DBL
      where compress_for in (''FOR ALL OPERATIONS'', ''OLTP'', ''ADVANCED'')
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

define OPTION_NAME=ADVANCED_COMPRESSION
define OPTION_QUERY=SECUREFILES_COMPRESSION_AND_DEDUPLICATION
DECLARE
        mycode number;
        myerr varchar2 (3000);
BEGIN
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into lms_options
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_LOBS''              as SOURCE_, owner, table_name, column_name, compression, deduplication
      from DBA_LOBS&DBL
      where compression   not in (''NO'', ''NONE'')
         or deduplication not in (''NO'', ''NONE'')
    union all
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_LOB_PARTITIONS''    as SOURCE_, table_owner, table_name, column_name, compression, deduplication
      from DBA_LOB_PARTITIONS&DBL
      where compression   not in (''NO'', ''NONE'')
         or deduplication not in (''NO'', ''NONE'')
    union all
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ''DBA_LOB_SUBPARTITIONS'' as SOURCE_, table_owner, table_name, column_name, compression, deduplication
      from DBA_LOB_SUBPARTITIONS&DBL
      where compression   not in (''NO'', ''NONE'')
         or deduplication not in (''NO'', ''NONE'')

  ');
  -- Recording 'no rows selected' case
  IF SQL%ROWCOUNT=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]');
EXCEPTION
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

-------------
-- PATCHES --
-------------
define OPTION_NAME=PATCHES
define OPTION_QUERY=SYS.REGISTRY\$HISTORY
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
        ACTION_TIME ,
        ACTION      ,
        NAMESPACE   ,
        VERSION     ,
        ID          ,
        COMMENTS
    from SYS.REGISTRY\$HISTORY&DBL
      order by ACTION_TIME
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

------------------------------------------------
-- Check User Privileges, for troubleshooting --
------------------------------------------------
define OPTION_NAME=USER_PRIVS
define OPTION_QUERY=*_SYS_PRIVS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'',
      SOURCE_,
      WHO    ,
      PRIVILEGE
    from (
          select
            ''USER_SYS_PRIVS''  AS SOURCE_,
            USERNAME            AS WHO,
            PRIVILEGE
            from USER_SYS_PRIVS&DBL
          union all
          select
            ''USER_ROLE_PRIVS'' AS SOURCE_,
            USERNAME            AS WHO,
            GRANTED_ROLE
            from USER_ROLE_PRIVS&DBL
          union all
          select
            ''ROLE_SYS_PRIVS''  AS SOURCE_,
            ROLE                AS WHO,
            PRIVILEGE
            from ROLE_SYS_PRIVS&DBL
         )
    order by SOURCE_
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM 10G AND HIGHER --- version and installation type (database control or grid/cloud control) --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_VERSIONS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      COMPONENT_NAME        , -- CORE
      VERSION               ,
      COMPAT_CORE_VERSION   ,
      COMPONENT_MODE        , -- SYSAUX=DB Control,CENTRAL=Grid/Cloud Control
      STATUS
    from SYSMAN.MGMT_VERSIONS&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM 10G AND HIGHER --- components --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT_INV_COMPONENT
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100,
      COL110,
      COL120,
      COL130,
      COL140
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      CONTAINER_TYPE          ,
      CONTAINER_NAME          ,
      CONTAINER_LOCATION      ,
      OUI_PLATFORM            ,
      IS_CLONABLE             ,
      NAME                    ,
      VERSION                 ,
      substr(replace(replace(replace(to_char(substr(DESCRIPTION, 1, 1000)), chr(10), ''[LF]''), chr(13), ''[CR]''),'''''''',''''''''), 1, 255),
      EXTERNAL_NAME           ,
      INSTALLED_LOCATION      ,
      INSTALLER_VERSION       ,
      MIN_DEINSTALLER_VERSION ,
      IS_TOP_LEVEL            ,
      TIMESTAMP
    from            SYSMAN.MGMT_INV_CONTAINER&DBL a
    full outer join SYSMAN.MGMT_INV_COMPONENT&DBL b on a.CONTAINER_GUID = b.CONTAINER_GUID
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM MANAGED TARGETS (10g or higher) --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=MGMT\$TARGET
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
     TARGET_NAME           ,
     DISPLAY_NAME          ,
     HOST_NAME             ,
     TARGET_TYPE           ,
     LAST_METRIC_LOAD_TIME ,
     TYPE_DISPLAY_NAME
    from MGMT\$TARGET&DBL
    where lower(TARGET_TYPE) like ''%database%'' or lower(TARGET_TYPE) like ''%pdb%''
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Management Pack Usage Statistics 12c Cloud Control --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=PACK_USAGE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100,
      COL110,
      COL120
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      reg.feature_name                           ,
      tgts.target_name                           ,
      tgts.display_name                          ,
      tgts.type_display_name                     ,
      tgts.host_name                             ,
      DECODE(stat.isused, 1, ''TRUE'', ''FALSE''),
      stat.detected_samples                      ,
      stat.total_samples                         ,
      stat.last_usage_date                       ,
      stat.first_sample_date                     ,
      stat.last_sample_date                      ,
      reg.feature_id
    from SYSMAN.mgmt_fu_registrations&DBL reg,
         SYSMAN.mgmt_fu_statistics&DBL    stat,
         SYSMAN.mgmt_targets&DBL          tgts
    where (stat.isused = 1 or stat.detected_samples > 0) -- current or past usage
      and stat.target_guid = tgts.target_guid
      and reg.feature_id = stat.feature_id
      and reg.collection_mode = 2
    --and tgts.display_name = ''TARGET_NAME''
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Management Pack Feature Usage Statistics 12c Cloud Control --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=PACK_FEATURE_USAGE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100,
      COL110,
      COL120,
      COL130,
      COL140,
      COL150,
      COL160
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      reg.feature_name                           ,
      tgts.target_name                           ,
      tgts.display_name                          ,
      tgts.type_display_name                     ,
      tgts.host_name                             ,
      DECODE(stat.isused, 1, ''TRUE'', ''FALSE'')    ,
      freg.feature_name                          ,
      DECODE(f_stats.isused, 1, ''TRUE'', ''FALSE'') ,
      f_stats.detected_samples                   ,
      f_stats.total_samples                      ,
      f_stats.last_usage_date                    ,
      f_stats.first_sample_date                  ,
      f_stats.last_sample_date                   ,
      lmap.pack_label                            ,
      lmap.pack_id                               ,
      lmap.feature_id
    from SYSMAN.mgmt_fu_registrations&DBL reg,
         SYSMAN.mgmt_fu_statistics&DBL    stat,
         SYSMAN.mgmt_targets&DBL          tgts,
         SYSMAN.mgmt_fu_statistics&DBL    f_stats,
         SYSMAN.mgmt_fu_registrations&DBL freg,
         SYSMAN.mgmt_fu_license_map&DBL   lmap
    where (stat.isused = 1 or stat.detected_samples > 0 or f_stats.isused = 1 or f_stats.detected_samples > 0) -- current or past usage
      and stat.target_guid = tgts.target_guid
      and reg.feature_id = stat.feature_id
      and reg.collection_mode = 2
      and lmap.pack_id = reg.feature_id
      and lmap.feature_id = freg.feature_id
      and freg.feature_id = f_stats.feature_id
      and f_stats.target_guid = tgts.target_guid
    --and tgts.display_name = ''TARGET_NAME''
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM - TUNING PACK EVIDENCES (10g or higher) - SQL Access Advisor and SQL Tuning Advisor --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=DBA_ADVISOR_TASKS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090,
      COL100,
      COL110,
      COL120,
      COL130
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      TASK_ID          ,
      OWNER            ,
      TASK_NAME        ,
      DESCRIPTION      ,
      ADVISOR_NAME     ,
      CREATED          ,
      LAST_MODIFIED    ,
      PARENT_TASK_ID   ,
      EXECUTION_START  ,
      EXECUTION_END    ,
      STATUS           ,
      SOURCE           ,
      HOW_CREATED
    from DBA_ADVISOR_TASKS&DBL
    where ADVISOR_NAME in (''SQL Tuning Advisor'', ''SQL Access Advisor'') -- SYS_AUTO_SQL_TUNING_TASK will be ignored at the analysis time
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM - TUNING PACK EVIDENCES (10g or higher) - SQL Tuning Sets --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=DBA_SQLSET
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      ID               ,
      NAME             ,
      OWNER            ,
      CREATED          ,
      LAST_MODIFIED    ,
      STATEMENT_COUNT  ,
      DESCRIPTION
    from DBA_SQLSET&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- OEM - TUNING PACK EVIDENCES (10g or higher) - SQL Tuning Sets references --
---------------------------------------------------
define OPTION_NAME=OEM
define OPTION_QUERY=DBA_SQLSET_REFERENCES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      SQLSET_ID        ,
      SQLSET_NAME      ,
      SQLSET_OWNER     ,
      ID               ,
      OWNER            ,
      CREATED          ,
      DESCRIPTION
    from DBA_SQLSET_REFERENCES&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- CUBES IN OLAPSYS.DBA\$OLAP_CUBES --
---------------------------------------------------
define OPTION_NAME=OLAP
define OPTION_QUERY=OLAPSYS.DBA\$OLAP_CUBES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER         ,
      CUBE_NAME     ,
      DISPLAY_NAME
    from  OLAPSYS.DBA\$OLAP_CUBES&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- CUBES IN DBA_CUBES (introduced in 11.1) --
---------------------------------------------------
define OPTION_NAME=OLAP
define OPTION_QUERY=DBA_CUBES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER         ,
      CUBE_NAME     ,
      AW_NAME
    from  DBA_CUBES&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- ANALYTIC WORKSPACES --
---------------------------------------------------
define OPTION_NAME=OLAP
define OPTION_QUERY=ANALYTIC_WORKSPACES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
        OWNER        ,
        AW_NUMBER    ,
        AW_NAME      ,
        PAGESPACES   ,
        GENERATIONS
    from DBA_AWS&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Column Encryption --
---------------------------------------------------
define OPTION_NAME=ADVANCED_SECURITY
define OPTION_QUERY=COLUMN_ENCRYPTION
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      OWNER      ,
      TABLE_NAME ,
      COLUMN_NAME
    from DBA_ENCRYPTED_COLUMNS&DBL
    where         OWNER || ''\#'' || TABLE_NAME|| ''\#'' || COLUMN_NAME not in
          (select OWNER || ''\#'' || TABLE_NAME|| ''\#'' || COLUMN_NAME from DBA_LOBS&DBL)  -- eliminate SecureFiles
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Tablespace Encryption --
---------------------------------------------------
define OPTION_NAME=ADVANCED_SECURITY
define OPTION_QUERY=TABLESPACE_ENCRYPTION
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
       TABLESPACE_NAME,
       ENCRYPTED
    from DBA_TABLESPACES&DBL
    where ENCRYPTED = ''YES''
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- SecureFiles Encryption --
---------------------------------------------------
define OPTION_NAME=ADVANCED_SECURITY
define OPTION_QUERY=SECUREFILES_ENCRYPTION
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
       x.*
    from (
      select ''DBA_LOBS''              as SOURCE_, OWNER      , TABLE_NAME, COLUMN_NAME, ENCRYPT, SECUREFILE
        from   DBA_LOBS&DBL
        where  ENCRYPT not in (''NO'', ''NONE'')
      union all
      select ''DBA_LOB_PARTITIONS''    as SOURCE_, TABLE_OWNER, TABLE_NAME, COLUMN_NAME, ENCRYPT, SECUREFILE
        from   DBA_LOB_PARTITIONS&DBL
        where  ENCRYPT not in (''NO'', ''NONE'')
      union all
      select ''DBA_LOB_SUBPARTITIONS'' as SOURCE_, TABLE_OWNER, TABLE_NAME, COLUMN_NAME, ENCRYPT, SECUREFILE
        from   DBA_LOB_SUBPARTITIONS&DBL
        where  ENCRYPT not in (''NO'', ''NONE'')
      ) x
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Active Data Guard 'Fast Incremental Backup on Physical Standby' feature usage --
---------------------------------------------------
define OPTION_NAME=ACTIVE_DATA_GUARD
define OPTION_QUERY=V\$BLOCK_CHANGE_TRACKING
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      b.DATABASE_ROLE  ,
      a.STATUS         ,
      a.FILENAME       ,
      a.BYTES
    from V\$BLOCK_CHANGE_TRACKING&DBL a, V\$DATABASE&DBL b
      where b.DATABASE_ROLE like ''PHYSICAL STANDBY''
        and a.STATUS = ''ENABLED''
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Advanced Compression 'Flashback Data Archive (Total Recall)' feature usage --
---------------------------------------------------
define OPTION_NAME=ADVANCED_COMPRESSION
define OPTION_QUERY=DBA_FLASHBACK_ARCHIVE
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      a.FLASHBACK_ARCHIVE_NAME ,
      b.TABLESPACE_NAME        ,
      b.QUOTA_IN_MB            ,
      a.RETENTION_IN_DAYS      ,
      a.CREATE_TIME            ,
      a.LAST_PURGE_TIME        ,
      a.STATUS
    from        DBA_FLASHBACK_ARCHIVE&DBL    a
      left join DBA_FLASHBACK_ARCHIVE_TS&DBL b on a.FLASHBACK_ARCHIVE\# = b.FLASHBACK_ARCHIVE\#
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Advanced Compression 'Flashback Data Archive (Total Recall)' feature usage --
---------------------------------------------------
define OPTION_NAME=ADVANCED_COMPRESSION
define OPTION_QUERY=DBA_FLASHBACK_ARCHIVE_TABLES
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      FLASHBACK_ARCHIVE_NAME ,
      OWNER_NAME             ,
      TABLE_NAME             ,
      ARCHIVE_TABLE_NAME
    from DBA_FLASHBACK_ARCHIVE_TABLES&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- Advanced Analytics Data Mining 10gv1.DM\$MODEL --
---------------------------------------------------
define OPTION_NAME=DATA_MINING
define OPTION_QUERY=10gv1.DM\$MODEL
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
        count(*)
    from DMSYS.DM\$MODEL&DBL
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- MULTITENANT (introduced in 12c_r1) --
---------------------------------------------------
define OPTION_NAME=MULTITENANT
define OPTION_QUERY=V\$CONTAINERS
DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;
  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      b.CDB            ,
      a.CON_ID         ,
      a.NAME           ,
      a.OPEN_MODE      ,
      a.OPEN_TIME      ,
      decode(a.CON_ID, 0, ''entire CDB or non-CDB'', 1, ''ROOT'', 2, ''SEED'', ''PDB'') as container_type
    from V\$CONTAINERS&DBL a, V\$DATABASE&DBL b
  ');
  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;
  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');
EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');
      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/

---------------------------------------------------
-- DATABASE IN-MEMORY (introduced in 12.1.0.2.0) - tables configured to use In-Memory Column Store
---------------------------------------------------
define OPTION_NAME=DB_IN_MEMORY
define OPTION_QUERY=INMEMORY_ENABLED_TABLES

DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;

  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
       x.*
    from (
      select ''DBA_TABLES''            as SOURCE_, OWNER      , TABLE_NAME,''''           , INMEMORY, INMEMORY_PRIORITY
        from DBA_TABLES&DBL
        where INMEMORY in (''ENABLED'')
      union all
      select ''DBA_TAB_PARTITIONS''    as SOURCE_, TABLE_OWNER, TABLE_NAME, PARTITION_NAME, INMEMORY, INMEMORY_PRIORITY
        from DBA_TAB_PARTITIONS&DBL
        where INMEMORY in (''ENABLED'')
      union all
      select ''DBA_TAB_SUBPARTITIONS'' as SOURCE_, TABLE_OWNER, TABLE_NAME, PARTITION_NAME, INMEMORY, INMEMORY_PRIORITY
        from DBA_TAB_SUBPARTITIONS&DBL
        where INMEMORY in (''ENABLED'')
      union all
      select ''DBA_OBJECT_TABLES''     as SOURCE_, OWNER      , TABLE_NAME, OBJECT_ID_TYPE, INMEMORY, INMEMORY_PRIORITY
        from DBA_OBJECT_TABLES&DBL
        where INMEMORY in (''ENABLED'')
      ) x
  ');

  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;

  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');

EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');

      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/


---------------------------------------------------
-- DATABASE IN-MEMORY - GV\$IM_SEGMENTS
---------------------------------------------------
define OPTION_NAME=DB_IN_MEMORY
define OPTION_QUERY=GV\$IM_SEGMENTS

DECLARE
        mycode number;
        myerr varchar2 (3000);
        mycount number;
BEGIN
  delete from TMP_LMS_OPTIONS;

  -- Using dynamic SQL in order to capture 'ORA-00942: table or view does not exist' error
  EXECUTE IMMEDIATE ('insert into TMP_LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      COL010,
      COL020,
      COL030,
      COL040,
      COL050,
      COL060,
      COL070,
      COL080,
      COL090
    )
    select
      ''&MACHINE_ID.'', ''&DB_NAME.'', ''&SYS_TIME.'', ''&HOST_NAME.'', ''&INSTANCE_NAME.'', ''&OPTION_NAME.'', ''&OPTION_QUERY.'',
      a.CON_ID                ,
      a.INST_ID               ,
      a.SEGMENT_TYPE          ,
      a.OWNER                 ,
      a.SEGMENT_NAME          ,
      a.PARTITION_NAME        ,
      a.POPULATE_STATUS       ,
      a.INMEMORY_PRIORITY     ,
      a.INMEMORY_COMPRESSION
    from GV\$IM_SEGMENTS&DBL a
    order by a.SEGMENT_TYPE, a.OWNER, a.SEGMENT_NAME, a.PARTITION_NAME
  ');

  mycount := SQL%ROWCOUNT;
  -- Recording 'no rows selected' case
  IF mycount=0 THEN
    INSERT INTO LMS_OPTIONS
    ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
      SQL_ERR_CODE,
      SQL_ERR_MESSAGE)
    VALUES
    ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
      0,
      'no rows selected');
  ELSE
    update TMP_LMS_OPTIONS set SQL_ERR_CODE=mycount, SQL_ERR_MESSAGE='count';
    insert into LMS_OPTIONS (select * from TMP_LMS_OPTIONS);
  END IF;

  dbms_output.put_line ('PL/SQL block completed for [&OPTION_NAME.].[&OPTION_QUERY.]. ' || mycount || ' rows collected.');

EXCEPTION
    -- Recording Errors
    when OTHERS then
      mycode := SQLCODE;
      myerr  := SQLERRM;
      dbms_output.put_line ('PL/SQL block exception ['|| mycode ||'] for [&OPTION_NAME.].[&OPTION_QUERY.]');

      INSERT INTO LMS_OPTIONS
      ( MACHINE_ID, DB_NAME, TIMESTAMP, HOST_NAME, INSTANCE_NAME, OPTION_NAME, OPTION_QUERY,
        SQL_ERR_CODE,
        SQL_ERR_MESSAGE)
       VALUES
      ( '&MACHINE_ID.', '&DB_NAME.', '&SYS_TIME.', '&HOST_NAME.', '&INSTANCE_NAME.', '&OPTION_NAME.', '&OPTION_QUERY.',
         mycode,
         myerr);
END;
/


COMMIT;
EXIT

        #;
        my @outputCreateTable = &execSQL($host, $createSQL, "lms_option_createTable");
        &echo(join("\n", @outputCreateTable));

        &echo("Querying from LMS_OPTION Table..");
        my $header = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        my $sql = $header . "SELECT '<BDNA=>MACHINE_ID='||MACHINE_ID||'<BDNA,1>DB_NAME='||DB_NAME||'<BDNA,1>TIMESTAMP='||TIMESTAMP" .
                  "||'<BDNA,1>HOST_NAME='||HOST_NAME||'<BDNA,1>INSTANCE_NAME='||INSTANCE_NAME||'<BDNA,1>OPTION_NAME='||OPTION_NAME" .
                  "||'<BDNA,1>OPTION_QUERY='||OPTION_QUERY||'<BDNA,1>SQL_ERR_CODE='||SQL_ERR_CODE||'<BDNA,1>SQL_ERR_MESSAGE='||SQL_ERR_MESSAGE".
                  "||'<BDNA,1>COL010='||COL010||'<BDNA,1>COL020='||COL020||'<BDNA,1>COL030='||COL030" .
                  "||'<BDNA,1>COL040='||COL040||'<BDNA,1>COL050='||COL050||'<BDNA,1>COL060='||COL060" .
                  "||'<BDNA,1>COL070='||COL070||'<BDNA,1>COL080='||COL080||'<BDNA,1>COL090='||COL090" .
                  "||'<BDNA,1>COL100='||'<=BDNA>' " .
                  "FROM LMS_OPTIONS ";
        my @output = &execSQL($host, $sql, "lms_option");
        my $outputCombined = join('', @output);
        $outputCombined =~ s/[\r|\n]//g;
        $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
        @output = split("\n",$outputCombined);
        while (@output) {
            my $oneRecord = shift(@output);

            if ($oneRecord =~ /<BDNA=>(.*?)<=BDNA>/) {
                my $oneRecord = $1;
                if (($oneRecord ne "NULL") && (substr($oneRecord, 12, 12) ne '||MACHINE_ID')) {
                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= $oneRecord;
                }
            }
        }

        &echo("Clean up LMS temporary option tables...");
        my $dropSQL = "DROP TABLE LMS_OPTIONS ";
        my @outputDropTable = &execSQL($host, $dropSQL, "lms_option_dropTable");
        &echo(join("\n", @outputDropTable));
        my $dropTSQL = "DROP TABLE TMP_LMS_OPTIONS ";
        my @outputDropTTable = &execSQL($host, $dropTSQL, "tmp_lms_option_dropTable");
        &echo(join("\n", @outputDropTTable));

        $BDNA_Results{"lmsScriptVersion"} = '15.1';
        $BDNA_Results{"lmsMachineID"} = $hostName;
        $BDNA_Results{"lmsDBName"} = $dbName;
        $BDNA_Results{"lmsOptions"} = $resultString;

        if ($BDNA_Results{"lmsOptions"}) {
            $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        } else {
            $BDNA_ResultCode = "com.bdna.cle.scripts.noData";
        }
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSOptions7StaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("Database version = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"});

        my ($owbInstalled, $owbUsed, $OWBQuery) = (0, 0, '');

        my $majorVersion = -1;
        if ($version =~ /^(\d+)\..*/) {
            $majorVersion = $1;
        }
        my $owbInstalled =0;
        my $owbUsed =0;
        my $OWBQuery = '';

        eval {
            &echo("Checking OWB Repositories.");
            my $sqlOWBRep = qq#
SET SERVEROUTPUT ON
DECLARE

  CURSOR schema_array IS
  SELECT owner
  FROM dba_tables WHERE table_name = 'CMPSYSCLASSES';

  c_installed_ver   integer;
  rows_processed    integer;
  v_schema          dba_tables.owner%TYPE;
  v_schema_cnt      integer;
  v_version         varchar2(15);

BEGIN
  OPEN schema_array;
  c_installed_ver := dbms_sql.open_cursor;

  --<<owb_schema_loop>>
  LOOP -- For each valid schema...
    FETCH schema_array INTO v_schema;
    EXIT WHEN schema_array%notfound;

    --Determine if current schema is valid (contains CMPInstallation_V view)
    dbms_sql.parse(c_installed_ver,'select installedversion from '|| v_schema || '.CMPInstallation_v where name = ''Oracle Warehouse Builder''',dbms_sql.native);
    dbms_sql.define_column(c_installed_ver, 1, v_version, 15);

    rows_processed:=dbms_sql.execute ( c_installed_ver );

    loop -- Find OWB version.
      if dbms_sql.fetch_rows(c_installed_ver) > 0 then
        dbms_sql.column_value (c_installed_ver, 1, v_version);
        v_schema_cnt := v_schema_cnt + 1;

        dbms_output.put_line ('.');
        dbms_output.put_line ('Schema '||v_schema||' contains a version '||v_version||' repository');
      else
        exit;
      end if;
    end loop;
  end loop;
END;
            #;
            my @outputOWBRep = execSQL($host, $sqlOWBRep, "OWBRep");
            $OWBQuery .= ("SQL> " . $sqlOWBRep . ";\n\n");
            if (scalar(@outputOWBRep) > 0) {
                $OWBQuery .= "OWB REPOSITORIES\n";
                my $printData = 0;
                while (@outputOWBRep) {
                    my $line = shift(@outputOWBRep);
                    if ($line =~ /^(Schema.*)$/) {
                       $printData =1;
                    } elsif ($line =~ /^(ORA-\d+: .*)$/) {
                        $OWBQuery .= $1;
                    } elsif (/^(\d+ rows selected.)$/) {
                        $OWBQuery .= $1 . "\n";
                        break;
                    }
                    if ($printData) {
                        $OWBQuery .= $line . "\n";
                        if ($line =~ /^(Schema.*)$/) {
                            $owbInstalled =1;
                            $owbUsed =1;
                        }
                    }
                }
            }
        };

        $BDNA_Results{"owbInstalled"} = $owbInstalled;
        $BDNA_Results{"b_owbInstalled"} = $owbInstalled;
        $BDNA_Results{"owbUsed"} = $owbUsed;
        $BDNA_Results{"b_owbUsed"} = $owbUsed;
        $BDNA_Results{"OWBQuery"} = $OWBQuery;

        if ($BDNA_Results{"owbUsed"}) {
            $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        } else {
            $BDNA_ResultCode = "com.bdna.cle.scripts.noData";
        }
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";

        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSRawDataDBAUsersStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="hostName" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $userCount = 0;
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $dbName = $BDNA_Connection_Info{"instanceName"};
        my $hostName = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"};
        &echo("DatabaseName = ".$dbName.", HostName = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"});

        my $header = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        &echo("Querying Timestamp Table..");
        my $timeSQL = $header . "SELECT '<BDNA>'||SYSDATE||'<BDNA>' FROM DUAL ";
        my @outputTime = &execSQL($host, $timeSQL, "lms_time_uoption");
        while (@outputTime) {
            my $oneRecord = shift(@outputTime);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsCollectTime"} = $1;
            }
        }

        &echo("Querying from DBA_USERS Table..");
        my $sql = $header . "SELECT '<BDNA=>USERNAME='||USERNAME||'<BDNA,1>USER_ID='||USER_ID||'<BDNA,1>DEFAULT_TABLESPACE='||DEFAULT_TABLESPACE" .
                  "||'<BDNA,1>TEMPORARY_TABLESPACE='||TEMPORARY_TABLESPACE||'<BDNA,1>CREATED='||CREATED||'<BDNA,1>PROFILE='||PROFILE" .
                  "||'<BDNA,1>MACHINE_ID=$hostName<BDNA,1>DB_NAME=$dbName<BDNA,1>EXPIRY_DATE='||EXPIRY_DATE||'<BDNA,1>TIMESTAMP='||SYSDATE||'<=BDNA>' ".
                  "FROM DBA_USERS ";
        my @output = &execSQL($host, $sql, "lms_dba_users");
        my $outputCombined = join('', @output);
        $outputCombined =~ s/[\r|\n]//g;
        $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
        @output = split("\n",$outputCombined);
        while (@output) {
            my $oneRecord = shift(@output);
            &echo("come out dba_user: $oneRecord");
            if ($oneRecord =~ /<BDNA=>(.*?)<=BDNA>/) {
                my $oneRecord = $1;
                if (!($oneRecord =~/USERNAME='USERNAME'<BDNA,1>USER_ID='USER_ID'/)) {
                    $userCount += 1;
                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= $oneRecord;
                }
            } 
        }
        $BDNA_Results{"lmsScriptVersion"} = '15.1';
        $BDNA_Results{"lmsMachineID"} = $hostName;
        $BDNA_Results{"lmsDBName"} = $dbName;

        $BDNA_Results{"lmsDBAUsers"} = $resultString;
        $BDNA_Results{"lmsUserCount"} = $userCount;

        if ($BDNA_Results{"lmsDBAUsers"} || $BDNA_Results{"lmsUserCount"}) {
            $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        } else {
            $BDNA_ResultCode = "com.bdna.cle.scripts.noData";
        }
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSRawDataVLicenseStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="hostName" />
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="version" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $sql = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $dbName = $BDNA_Connection_Info{"instanceName"};
        my $hostName = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"};
        my $version = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:version"};
        &echo("DatabaseName = " . $dbName . ", HostName = " . $hostName . ", Database version = " . $version);

        my $header = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        &echo("Querying Timestamp Table..");
        my $timeSQL = $header . "SELECT '<BDNA>'||SYSDATE||'<BDNA>' FROM DUAL ";
        my @outputTime = &execSQL($host, $timeSQL, "lms_time_loption");
        while (@outputTime) {
            my $oneRecord = shift(@outputTime);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsCollectTime"} = $1;
            }
        }
        &echo('Querying from V$LICENSE Table..');
        if (!($version =~ /^9\..*/)) {
            $sql = $header . "SELECT '<BDNA=>SESSIONS_MAX='||SESSIONS_MAX||'<BDNA,1>SESSIONS_WARNING='||SESSIONS_WARNING" .
                   "||'<BDNA,1>SESSIONS_CURRENT='||SESSIONS_CURRENT" .
                   "||'<BDNA,1>SESSIONS_HIGHWATER='||SESSIONS_HIGHWATER||'<BDNA,1>CPU_COUNT_CURRENT='||CPU_COUNT_CURRENT" .
                   "||'<BDNA,1>CPU_COUNT_HIGHWATER='||CPU_COUNT_HIGHWATER||'<BDNA,1>USERS_MAX='||USERS_MAX" .
                   "||'<BDNA,1>MACHINE_ID=$hostName<BDNA,1>DB_NAME=$dbName<BDNA,1>TIMESTAMP='||SYSDATE||'<=BDNA>' ".
                   'FROM V$LICENSE ';
        } else {
            $sql = $header . "SELECT '<BDNA=>SESSIONS_MAX='||SESSIONS_MAX||'<BDNA,1>SESSIONS_WARNING='||SESSIONS_WARNING" .
                   "||'<BDNA,1>SESSIONS_CURRENT='||SESSIONS_CURRENT" .
                   "||'<BDNA,1>SESSIONS_HIGHWATER='||SESSIONS_HIGHWATER" .
                   "||'<BDNA,1>USERS_MAX='||USERS_MAX" .
                   "||'<BDNA,1>MACHINE_ID=$hostName<BDNA,1>DB_NAME=$dbName<BDNA,1>TIMESTAMP='||SYSDATE||'<=BDNA>' ".
                   'FROM V$LICENSE ';
        }
        my @output = &execSQL($host, $sql, "lms_v_license");
        my $outputCombined = join('', @output);
        $outputCombined =~ s/[\r|\n]//g;
        $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
        @output = split("\n",$outputCombined);
        while (@output) {
            my $oneRecord = shift(@output);
            if ($oneRecord =~ /<BDNA=>(.*)<=BDNA>/) {
                if (!($oneRecord =~/SESSIONS_MAX='SESSIONS_MAX'<BDNA,1>SESSIONS_WARNING='SESSIONS_WARNING'/)) {
                    $oneRecord = $1;
                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= $oneRecord;
                }
            } 
        }
        $BDNA_Results{"lmsScriptVersion"} = '15.1';
        $BDNA_Results{"lmsMachineID"} = $hostName;
        $BDNA_Results{"lmsDBName"} = $dbName;
        $BDNA_Results{"lmsVLicense"} = $resultString;

        if ($BDNA_Results{"lmsVLicense"}) {
            $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        } else {
            $BDNA_ResultCode = "com.bdna.cle.scripts.noData";
        }
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>

    <scriptTable
        scriptName="UNIXOracleInstanceLMSRawDataVSessionStaticScript"
        scriptVersion="1.0">
        <scriptArg isGlobal="false"  isOptional="false"
          argNamePattern="%efntype%:%atr%"
          efnSource="root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint"
          attributeName="hostName" />
        <![CDATA[
        our (%BDNA_Params, $BDNA_Separator, $BDNA_ErrorCode, $BDNA_ResultCode, %BDNA_Results, $BDNA_MessageBundle);
        my $resultString = '';
        my $host = $BDNA_Connection_Info{"HostObject"};
        my $dbName = $BDNA_Connection_Info{"instanceName"};
        my $hostName = $BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"};
        &echo("DatabaseName = ".$dbName.", HostName = ".$BDNA_Params{"root.types.footprint.OracleLMSFootprint.UNIXOracleFootprint:hostName"});

        my $header = "alter session set NLS_DATE_FORMAT='YYYY-MM-DD_HH24:MI:SS';\n";
        &echo("Querying Timestamp Table..");
        my $timeSQL = $header . "SELECT '<BDNA>'||SYSDATE||'<BDNA>' FROM DUAL ";
        my @outputTime = &execSQL($host, $timeSQL, "lms_time_soption");
        while (@outputTime) {
            my $oneRecord = shift(@outputTime);
            if ($oneRecord =~ /^<BDNA>(.*?)<BDNA>/) {
                $BDNA_Results{"lmsCollectTime"} = $1;
            }
        }

        &echo('Querying from V$SESSION Table..');
        my $sql = $header . "SELECT '<BDNA=>SADDR='||SADDR||'<BDNA,1>SID='||SID||'<BDNA,1>PADDR='||PADDR||'<BDNA,1>USR='||USER#" .
                  "||'<BDNA,1>USERNAME='||USERNAME||'<BDNA,1>COMMAND='||COMMAND" .
                  "||'<BDNA,1>STATUS='||STATUS||'<BDNA,1>SERVER='||SERVER||'<BDNA,1>SCHEMANAME='||SCHEMANAME" .
                  "||'<BDNA,1>OSUSER='||OSUSER||'<BDNA,1>PROCESS='||PROCESS" .
                  "||'<BDNA,1>MACHINE='||MACHINE||'<BDNA,1>TERMINAL='||TERMINAL||'<BDNA,1>PROGRAM='||PROGRAM" .
                  "||'<BDNA,1>TYP='||TYPE||'<BDNA,1>LAST_CALL_ET='||LAST_CALL_ET||'<BDNA,1>LOGON_TIME='||LOGON_TIME" .
                  "||'<BDNA,1>MACHINE_ID=$hostName<BDNA,1>DB_NAME=$dbName<BDNA,1>TIMESTAMP='||SYSDATE||'<=BDNA>' ".
                  'FROM V$SESSION ';
        my @output = &execSQL($host, $sql, "lms_v_license");
        my $outputCombined = join('', @output);
        $outputCombined =~ s/[\r|\n]//g;
        $outputCombined =~ s/<=BDNA>/<=BDNA>\n/g;
        @output = split("\n",$outputCombined);
        while (@output) {
            my $oneRecord = shift(@output);
            if ($oneRecord =~ /^<BDNA=>(.*?)<=BDNA>/) {
                $oneRecord = $1;
                if (!($oneRecord =~/SADDR='SADDR'<BDNA,1>SID='SID'/)) {
                    if ($resultString) {
                        $resultString .= '<BDNA,>';
                    }
                    $resultString .= $oneRecord;
                }
            }
        }
        $BDNA_Results{"lmsScriptVersion"} = '15.1';
        $BDNA_Results{"lmsMachineID"} = $hostName;
        $BDNA_Results{"lmsDBName"} = $dbName;
        $BDNA_Results{"lmsVSession"} = $resultString;

        if ($BDNA_Results{"lmsVSession"}) {
            $BDNA_ResultCode = "com.bdna.cle.scripts.success";
        } else {
            $BDNA_ResultCode = "com.bdna.cle.scripts.noData";
        }
        $BDNA_ErrorCode = 0;
        $BDNA_MessageBundle = "MessagesBundle";
        ]]>
    </scriptTable>
</module>
